// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/blockchain"
	"github.com/skyisboss/pay-system/ent/predicate"
	"github.com/skyisboss/pay-system/ent/schema"
)

// BlockchainUpdate is the builder for updating Blockchain entities.
type BlockchainUpdate struct {
	config
	hooks    []Hook
	mutation *BlockchainMutation
}

// Where appends a list predicates to the BlockchainUpdate builder.
func (bu *BlockchainUpdate) Where(ps ...predicate.Blockchain) *BlockchainUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BlockchainUpdate) SetCreatedAt(t time.Time) *BlockchainUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableCreatedAt(t *time.Time) *BlockchainUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (bu *BlockchainUpdate) ClearCreatedAt() *BlockchainUpdate {
	bu.mutation.ClearCreatedAt()
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlockchainUpdate) SetUpdatedAt(t time.Time) *BlockchainUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableUpdatedAt(t *time.Time) *BlockchainUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BlockchainUpdate) ClearUpdatedAt() *BlockchainUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BlockchainUpdate) SetDeletedAt(t time.Time) *BlockchainUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableDeletedAt(t *time.Time) *BlockchainUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BlockchainUpdate) ClearDeletedAt() *BlockchainUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetChain sets the "chain" field.
func (bu *BlockchainUpdate) SetChain(s string) *BlockchainUpdate {
	bu.mutation.SetChain(s)
	return bu
}

// SetTypes sets the "types" field.
func (bu *BlockchainUpdate) SetTypes(s string) *BlockchainUpdate {
	bu.mutation.SetTypes(s)
	return bu
}

// SetSymbol sets the "symbol" field.
func (bu *BlockchainUpdate) SetSymbol(s string) *BlockchainUpdate {
	bu.mutation.SetSymbol(s)
	return bu
}

// SetDecimals sets the "decimals" field.
func (bu *BlockchainUpdate) SetDecimals(i int64) *BlockchainUpdate {
	bu.mutation.ResetDecimals()
	bu.mutation.SetDecimals(i)
	return bu
}

// AddDecimals adds i to the "decimals" field.
func (bu *BlockchainUpdate) AddDecimals(i int64) *BlockchainUpdate {
	bu.mutation.AddDecimals(i)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BlockchainUpdate) SetStatus(i int64) *BlockchainUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BlockchainUpdate) AddStatus(i int64) *BlockchainUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// SetTokenAddress sets the "token_address" field.
func (bu *BlockchainUpdate) SetTokenAddress(s string) *BlockchainUpdate {
	bu.mutation.SetTokenAddress(s)
	return bu
}

// SetTokenAbi sets the "token_abi" field.
func (bu *BlockchainUpdate) SetTokenAbi(s string) *BlockchainUpdate {
	bu.mutation.SetTokenAbi(s)
	return bu
}

// SetNillableTokenAbi sets the "token_abi" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableTokenAbi(s *string) *BlockchainUpdate {
	if s != nil {
		bu.SetTokenAbi(*s)
	}
	return bu
}

// ClearTokenAbi clears the value of the "token_abi" field.
func (bu *BlockchainUpdate) ClearTokenAbi() *BlockchainUpdate {
	bu.mutation.ClearTokenAbi()
	return bu
}

// SetColdAddress sets the "cold_address" field.
func (bu *BlockchainUpdate) SetColdAddress(s string) *BlockchainUpdate {
	bu.mutation.SetColdAddress(s)
	return bu
}

// SetHotAddress sets the "hot_address" field.
func (bu *BlockchainUpdate) SetHotAddress(s string) *BlockchainUpdate {
	bu.mutation.SetHotAddress(s)
	return bu
}

// SetScanBlockNum sets the "scan_block_num" field.
func (bu *BlockchainUpdate) SetScanBlockNum(i int64) *BlockchainUpdate {
	bu.mutation.ResetScanBlockNum()
	bu.mutation.SetScanBlockNum(i)
	return bu
}

// AddScanBlockNum adds i to the "scan_block_num" field.
func (bu *BlockchainUpdate) AddScanBlockNum(i int64) *BlockchainUpdate {
	bu.mutation.AddScanBlockNum(i)
	return bu
}

// SetMinFreeNum sets the "min_free_num" field.
func (bu *BlockchainUpdate) SetMinFreeNum(i int64) *BlockchainUpdate {
	bu.mutation.ResetMinFreeNum()
	bu.mutation.SetMinFreeNum(i)
	return bu
}

// AddMinFreeNum adds i to the "min_free_num" field.
func (bu *BlockchainUpdate) AddMinFreeNum(i int64) *BlockchainUpdate {
	bu.mutation.AddMinFreeNum(i)
	return bu
}

// SetMinConfirmNum sets the "min_confirm_num" field.
func (bu *BlockchainUpdate) SetMinConfirmNum(i int64) *BlockchainUpdate {
	bu.mutation.ResetMinConfirmNum()
	bu.mutation.SetMinConfirmNum(i)
	return bu
}

// AddMinConfirmNum adds i to the "min_confirm_num" field.
func (bu *BlockchainUpdate) AddMinConfirmNum(i int64) *BlockchainUpdate {
	bu.mutation.AddMinConfirmNum(i)
	return bu
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (bu *BlockchainUpdate) SetWithdrawFee(f float64) *BlockchainUpdate {
	bu.mutation.ResetWithdrawFee()
	bu.mutation.SetWithdrawFee(f)
	return bu
}

// AddWithdrawFee adds f to the "withdraw_fee" field.
func (bu *BlockchainUpdate) AddWithdrawFee(f float64) *BlockchainUpdate {
	bu.mutation.AddWithdrawFee(f)
	return bu
}

// SetWithdrawFeeType sets the "withdraw_fee_type" field.
func (bu *BlockchainUpdate) SetWithdrawFeeType(i int64) *BlockchainUpdate {
	bu.mutation.ResetWithdrawFeeType()
	bu.mutation.SetWithdrawFeeType(i)
	return bu
}

// AddWithdrawFeeType adds i to the "withdraw_fee_type" field.
func (bu *BlockchainUpdate) AddWithdrawFeeType(i int64) *BlockchainUpdate {
	bu.mutation.AddWithdrawFeeType(i)
	return bu
}

// SetMinDeposit sets the "min_deposit" field.
func (bu *BlockchainUpdate) SetMinDeposit(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.ResetMinDeposit()
	bu.mutation.SetMinDeposit(d)
	return bu
}

// AddMinDeposit adds d to the "min_deposit" field.
func (bu *BlockchainUpdate) AddMinDeposit(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.AddMinDeposit(d)
	return bu
}

// SetMinWithdraw sets the "min_withdraw" field.
func (bu *BlockchainUpdate) SetMinWithdraw(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.ResetMinWithdraw()
	bu.mutation.SetMinWithdraw(d)
	return bu
}

// AddMinWithdraw adds d to the "min_withdraw" field.
func (bu *BlockchainUpdate) AddMinWithdraw(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.AddMinWithdraw(d)
	return bu
}

// SetMinCollect sets the "min_collect" field.
func (bu *BlockchainUpdate) SetMinCollect(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.ResetMinCollect()
	bu.mutation.SetMinCollect(d)
	return bu
}

// AddMinCollect adds d to the "min_collect" field.
func (bu *BlockchainUpdate) AddMinCollect(d decimal.Decimal) *BlockchainUpdate {
	bu.mutation.AddMinCollect(d)
	return bu
}

// SetGasPrice sets the "gas_price" field.
func (bu *BlockchainUpdate) SetGasPrice(sp schema.GasPrice) *BlockchainUpdate {
	bu.mutation.SetGasPrice(sp)
	return bu
}

// SetNillableGasPrice sets the "gas_price" field if the given value is not nil.
func (bu *BlockchainUpdate) SetNillableGasPrice(sp *schema.GasPrice) *BlockchainUpdate {
	if sp != nil {
		bu.SetGasPrice(*sp)
	}
	return bu
}

// ClearGasPrice clears the value of the "gas_price" field.
func (bu *BlockchainUpdate) ClearGasPrice() *BlockchainUpdate {
	bu.mutation.ClearGasPrice()
	return bu
}

// Mutation returns the BlockchainMutation object of the builder.
func (bu *BlockchainUpdate) Mutation() *BlockchainMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlockchainUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockchainUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockchainUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockchainUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlockchainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(blockchain.Table, blockchain.Columns, sqlgraph.NewFieldSpec(blockchain.FieldID, field.TypeUint64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(blockchain.FieldCreatedAt, field.TypeTime, value)
	}
	if bu.mutation.CreatedAtCleared() {
		_spec.ClearField(blockchain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(blockchain.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(blockchain.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(blockchain.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(blockchain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Chain(); ok {
		_spec.SetField(blockchain.FieldChain, field.TypeString, value)
	}
	if value, ok := bu.mutation.Types(); ok {
		_spec.SetField(blockchain.FieldTypes, field.TypeString, value)
	}
	if value, ok := bu.mutation.Symbol(); ok {
		_spec.SetField(blockchain.FieldSymbol, field.TypeString, value)
	}
	if value, ok := bu.mutation.Decimals(); ok {
		_spec.SetField(blockchain.FieldDecimals, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedDecimals(); ok {
		_spec.AddField(blockchain.FieldDecimals, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(blockchain.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(blockchain.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.TokenAddress(); ok {
		_spec.SetField(blockchain.FieldTokenAddress, field.TypeString, value)
	}
	if value, ok := bu.mutation.TokenAbi(); ok {
		_spec.SetField(blockchain.FieldTokenAbi, field.TypeString, value)
	}
	if bu.mutation.TokenAbiCleared() {
		_spec.ClearField(blockchain.FieldTokenAbi, field.TypeString)
	}
	if value, ok := bu.mutation.ColdAddress(); ok {
		_spec.SetField(blockchain.FieldColdAddress, field.TypeString, value)
	}
	if value, ok := bu.mutation.HotAddress(); ok {
		_spec.SetField(blockchain.FieldHotAddress, field.TypeString, value)
	}
	if value, ok := bu.mutation.ScanBlockNum(); ok {
		_spec.SetField(blockchain.FieldScanBlockNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedScanBlockNum(); ok {
		_spec.AddField(blockchain.FieldScanBlockNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.MinFreeNum(); ok {
		_spec.SetField(blockchain.FieldMinFreeNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedMinFreeNum(); ok {
		_spec.AddField(blockchain.FieldMinFreeNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.MinConfirmNum(); ok {
		_spec.SetField(blockchain.FieldMinConfirmNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedMinConfirmNum(); ok {
		_spec.AddField(blockchain.FieldMinConfirmNum, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.WithdrawFee(); ok {
		_spec.SetField(blockchain.FieldWithdrawFee, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedWithdrawFee(); ok {
		_spec.AddField(blockchain.FieldWithdrawFee, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.WithdrawFeeType(); ok {
		_spec.SetField(blockchain.FieldWithdrawFeeType, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.AddedWithdrawFeeType(); ok {
		_spec.AddField(blockchain.FieldWithdrawFeeType, field.TypeInt64, value)
	}
	if value, ok := bu.mutation.MinDeposit(); ok {
		_spec.SetField(blockchain.FieldMinDeposit, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedMinDeposit(); ok {
		_spec.AddField(blockchain.FieldMinDeposit, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.MinWithdraw(); ok {
		_spec.SetField(blockchain.FieldMinWithdraw, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedMinWithdraw(); ok {
		_spec.AddField(blockchain.FieldMinWithdraw, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.MinCollect(); ok {
		_spec.SetField(blockchain.FieldMinCollect, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedMinCollect(); ok {
		_spec.AddField(blockchain.FieldMinCollect, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.GasPrice(); ok {
		_spec.SetField(blockchain.FieldGasPrice, field.TypeJSON, value)
	}
	if bu.mutation.GasPriceCleared() {
		_spec.ClearField(blockchain.FieldGasPrice, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlockchainUpdateOne is the builder for updating a single Blockchain entity.
type BlockchainUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlockchainMutation
}

// SetCreatedAt sets the "created_at" field.
func (buo *BlockchainUpdateOne) SetCreatedAt(t time.Time) *BlockchainUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableCreatedAt(t *time.Time) *BlockchainUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (buo *BlockchainUpdateOne) ClearCreatedAt() *BlockchainUpdateOne {
	buo.mutation.ClearCreatedAt()
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlockchainUpdateOne) SetUpdatedAt(t time.Time) *BlockchainUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableUpdatedAt(t *time.Time) *BlockchainUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BlockchainUpdateOne) ClearUpdatedAt() *BlockchainUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BlockchainUpdateOne) SetDeletedAt(t time.Time) *BlockchainUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableDeletedAt(t *time.Time) *BlockchainUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BlockchainUpdateOne) ClearDeletedAt() *BlockchainUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetChain sets the "chain" field.
func (buo *BlockchainUpdateOne) SetChain(s string) *BlockchainUpdateOne {
	buo.mutation.SetChain(s)
	return buo
}

// SetTypes sets the "types" field.
func (buo *BlockchainUpdateOne) SetTypes(s string) *BlockchainUpdateOne {
	buo.mutation.SetTypes(s)
	return buo
}

// SetSymbol sets the "symbol" field.
func (buo *BlockchainUpdateOne) SetSymbol(s string) *BlockchainUpdateOne {
	buo.mutation.SetSymbol(s)
	return buo
}

// SetDecimals sets the "decimals" field.
func (buo *BlockchainUpdateOne) SetDecimals(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetDecimals()
	buo.mutation.SetDecimals(i)
	return buo
}

// AddDecimals adds i to the "decimals" field.
func (buo *BlockchainUpdateOne) AddDecimals(i int64) *BlockchainUpdateOne {
	buo.mutation.AddDecimals(i)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BlockchainUpdateOne) SetStatus(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BlockchainUpdateOne) AddStatus(i int64) *BlockchainUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// SetTokenAddress sets the "token_address" field.
func (buo *BlockchainUpdateOne) SetTokenAddress(s string) *BlockchainUpdateOne {
	buo.mutation.SetTokenAddress(s)
	return buo
}

// SetTokenAbi sets the "token_abi" field.
func (buo *BlockchainUpdateOne) SetTokenAbi(s string) *BlockchainUpdateOne {
	buo.mutation.SetTokenAbi(s)
	return buo
}

// SetNillableTokenAbi sets the "token_abi" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableTokenAbi(s *string) *BlockchainUpdateOne {
	if s != nil {
		buo.SetTokenAbi(*s)
	}
	return buo
}

// ClearTokenAbi clears the value of the "token_abi" field.
func (buo *BlockchainUpdateOne) ClearTokenAbi() *BlockchainUpdateOne {
	buo.mutation.ClearTokenAbi()
	return buo
}

// SetColdAddress sets the "cold_address" field.
func (buo *BlockchainUpdateOne) SetColdAddress(s string) *BlockchainUpdateOne {
	buo.mutation.SetColdAddress(s)
	return buo
}

// SetHotAddress sets the "hot_address" field.
func (buo *BlockchainUpdateOne) SetHotAddress(s string) *BlockchainUpdateOne {
	buo.mutation.SetHotAddress(s)
	return buo
}

// SetScanBlockNum sets the "scan_block_num" field.
func (buo *BlockchainUpdateOne) SetScanBlockNum(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetScanBlockNum()
	buo.mutation.SetScanBlockNum(i)
	return buo
}

// AddScanBlockNum adds i to the "scan_block_num" field.
func (buo *BlockchainUpdateOne) AddScanBlockNum(i int64) *BlockchainUpdateOne {
	buo.mutation.AddScanBlockNum(i)
	return buo
}

// SetMinFreeNum sets the "min_free_num" field.
func (buo *BlockchainUpdateOne) SetMinFreeNum(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetMinFreeNum()
	buo.mutation.SetMinFreeNum(i)
	return buo
}

// AddMinFreeNum adds i to the "min_free_num" field.
func (buo *BlockchainUpdateOne) AddMinFreeNum(i int64) *BlockchainUpdateOne {
	buo.mutation.AddMinFreeNum(i)
	return buo
}

// SetMinConfirmNum sets the "min_confirm_num" field.
func (buo *BlockchainUpdateOne) SetMinConfirmNum(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetMinConfirmNum()
	buo.mutation.SetMinConfirmNum(i)
	return buo
}

// AddMinConfirmNum adds i to the "min_confirm_num" field.
func (buo *BlockchainUpdateOne) AddMinConfirmNum(i int64) *BlockchainUpdateOne {
	buo.mutation.AddMinConfirmNum(i)
	return buo
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (buo *BlockchainUpdateOne) SetWithdrawFee(f float64) *BlockchainUpdateOne {
	buo.mutation.ResetWithdrawFee()
	buo.mutation.SetWithdrawFee(f)
	return buo
}

// AddWithdrawFee adds f to the "withdraw_fee" field.
func (buo *BlockchainUpdateOne) AddWithdrawFee(f float64) *BlockchainUpdateOne {
	buo.mutation.AddWithdrawFee(f)
	return buo
}

// SetWithdrawFeeType sets the "withdraw_fee_type" field.
func (buo *BlockchainUpdateOne) SetWithdrawFeeType(i int64) *BlockchainUpdateOne {
	buo.mutation.ResetWithdrawFeeType()
	buo.mutation.SetWithdrawFeeType(i)
	return buo
}

// AddWithdrawFeeType adds i to the "withdraw_fee_type" field.
func (buo *BlockchainUpdateOne) AddWithdrawFeeType(i int64) *BlockchainUpdateOne {
	buo.mutation.AddWithdrawFeeType(i)
	return buo
}

// SetMinDeposit sets the "min_deposit" field.
func (buo *BlockchainUpdateOne) SetMinDeposit(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.ResetMinDeposit()
	buo.mutation.SetMinDeposit(d)
	return buo
}

// AddMinDeposit adds d to the "min_deposit" field.
func (buo *BlockchainUpdateOne) AddMinDeposit(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.AddMinDeposit(d)
	return buo
}

// SetMinWithdraw sets the "min_withdraw" field.
func (buo *BlockchainUpdateOne) SetMinWithdraw(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.ResetMinWithdraw()
	buo.mutation.SetMinWithdraw(d)
	return buo
}

// AddMinWithdraw adds d to the "min_withdraw" field.
func (buo *BlockchainUpdateOne) AddMinWithdraw(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.AddMinWithdraw(d)
	return buo
}

// SetMinCollect sets the "min_collect" field.
func (buo *BlockchainUpdateOne) SetMinCollect(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.ResetMinCollect()
	buo.mutation.SetMinCollect(d)
	return buo
}

// AddMinCollect adds d to the "min_collect" field.
func (buo *BlockchainUpdateOne) AddMinCollect(d decimal.Decimal) *BlockchainUpdateOne {
	buo.mutation.AddMinCollect(d)
	return buo
}

// SetGasPrice sets the "gas_price" field.
func (buo *BlockchainUpdateOne) SetGasPrice(sp schema.GasPrice) *BlockchainUpdateOne {
	buo.mutation.SetGasPrice(sp)
	return buo
}

// SetNillableGasPrice sets the "gas_price" field if the given value is not nil.
func (buo *BlockchainUpdateOne) SetNillableGasPrice(sp *schema.GasPrice) *BlockchainUpdateOne {
	if sp != nil {
		buo.SetGasPrice(*sp)
	}
	return buo
}

// ClearGasPrice clears the value of the "gas_price" field.
func (buo *BlockchainUpdateOne) ClearGasPrice() *BlockchainUpdateOne {
	buo.mutation.ClearGasPrice()
	return buo
}

// Mutation returns the BlockchainMutation object of the builder.
func (buo *BlockchainUpdateOne) Mutation() *BlockchainMutation {
	return buo.mutation
}

// Where appends a list predicates to the BlockchainUpdate builder.
func (buo *BlockchainUpdateOne) Where(ps ...predicate.Blockchain) *BlockchainUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlockchainUpdateOne) Select(field string, fields ...string) *BlockchainUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blockchain entity.
func (buo *BlockchainUpdateOne) Save(ctx context.Context) (*Blockchain, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockchainUpdateOne) SaveX(ctx context.Context) *Blockchain {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlockchainUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockchainUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlockchainUpdateOne) sqlSave(ctx context.Context) (_node *Blockchain, err error) {
	_spec := sqlgraph.NewUpdateSpec(blockchain.Table, blockchain.Columns, sqlgraph.NewFieldSpec(blockchain.FieldID, field.TypeUint64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blockchain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blockchain.FieldID)
		for _, f := range fields {
			if !blockchain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blockchain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(blockchain.FieldCreatedAt, field.TypeTime, value)
	}
	if buo.mutation.CreatedAtCleared() {
		_spec.ClearField(blockchain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(blockchain.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(blockchain.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(blockchain.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(blockchain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Chain(); ok {
		_spec.SetField(blockchain.FieldChain, field.TypeString, value)
	}
	if value, ok := buo.mutation.Types(); ok {
		_spec.SetField(blockchain.FieldTypes, field.TypeString, value)
	}
	if value, ok := buo.mutation.Symbol(); ok {
		_spec.SetField(blockchain.FieldSymbol, field.TypeString, value)
	}
	if value, ok := buo.mutation.Decimals(); ok {
		_spec.SetField(blockchain.FieldDecimals, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedDecimals(); ok {
		_spec.AddField(blockchain.FieldDecimals, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(blockchain.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(blockchain.FieldStatus, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.TokenAddress(); ok {
		_spec.SetField(blockchain.FieldTokenAddress, field.TypeString, value)
	}
	if value, ok := buo.mutation.TokenAbi(); ok {
		_spec.SetField(blockchain.FieldTokenAbi, field.TypeString, value)
	}
	if buo.mutation.TokenAbiCleared() {
		_spec.ClearField(blockchain.FieldTokenAbi, field.TypeString)
	}
	if value, ok := buo.mutation.ColdAddress(); ok {
		_spec.SetField(blockchain.FieldColdAddress, field.TypeString, value)
	}
	if value, ok := buo.mutation.HotAddress(); ok {
		_spec.SetField(blockchain.FieldHotAddress, field.TypeString, value)
	}
	if value, ok := buo.mutation.ScanBlockNum(); ok {
		_spec.SetField(blockchain.FieldScanBlockNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedScanBlockNum(); ok {
		_spec.AddField(blockchain.FieldScanBlockNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.MinFreeNum(); ok {
		_spec.SetField(blockchain.FieldMinFreeNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedMinFreeNum(); ok {
		_spec.AddField(blockchain.FieldMinFreeNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.MinConfirmNum(); ok {
		_spec.SetField(blockchain.FieldMinConfirmNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedMinConfirmNum(); ok {
		_spec.AddField(blockchain.FieldMinConfirmNum, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.WithdrawFee(); ok {
		_spec.SetField(blockchain.FieldWithdrawFee, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedWithdrawFee(); ok {
		_spec.AddField(blockchain.FieldWithdrawFee, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.WithdrawFeeType(); ok {
		_spec.SetField(blockchain.FieldWithdrawFeeType, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.AddedWithdrawFeeType(); ok {
		_spec.AddField(blockchain.FieldWithdrawFeeType, field.TypeInt64, value)
	}
	if value, ok := buo.mutation.MinDeposit(); ok {
		_spec.SetField(blockchain.FieldMinDeposit, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedMinDeposit(); ok {
		_spec.AddField(blockchain.FieldMinDeposit, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.MinWithdraw(); ok {
		_spec.SetField(blockchain.FieldMinWithdraw, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedMinWithdraw(); ok {
		_spec.AddField(blockchain.FieldMinWithdraw, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.MinCollect(); ok {
		_spec.SetField(blockchain.FieldMinCollect, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedMinCollect(); ok {
		_spec.AddField(blockchain.FieldMinCollect, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.GasPrice(); ok {
		_spec.SetField(blockchain.FieldGasPrice, field.TypeJSON, value)
	}
	if buo.mutation.GasPriceCleared() {
		_spec.ClearField(blockchain.FieldGasPrice, field.TypeJSON)
	}
	_node = &Blockchain{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blockchain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

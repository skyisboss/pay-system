// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldAppType holds the string denoting the app_type field in the database.
	FieldAppType = "app_type"
	// FieldAppName holds the string denoting the app_name field in the database.
	FieldAppName = "app_name"
	// FieldAppSecret holds the string denoting the app_secret field in the database.
	FieldAppSecret = "app_secret"
	// FieldAppStatus holds the string denoting the app_status field in the database.
	FieldAppStatus = "app_status"
	// FieldWithdrawStatus holds the string denoting the withdraw_status field in the database.
	FieldWithdrawStatus = "withdraw_status"
	// FieldWebHook holds the string denoting the web_hook field in the database.
	FieldWebHook = "web_hook"
	// Table holds the table name of the product in the database.
	Table = "product"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAppID,
	FieldAppType,
	FieldAppName,
	FieldAppSecret,
	FieldAppStatus,
	FieldWithdrawStatus,
	FieldWebHook,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAppType holds the default value on creation for the "app_type" field.
	DefaultAppType int64
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByAppType orders the results by the app_type field.
func ByAppType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppType, opts...).ToFunc()
}

// ByAppName orders the results by the app_name field.
func ByAppName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppName, opts...).ToFunc()
}

// ByAppSecret orders the results by the app_secret field.
func ByAppSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppSecret, opts...).ToFunc()
}

// ByAppStatus orders the results by the app_status field.
func ByAppStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppStatus, opts...).ToFunc()
}

// ByWithdrawStatus orders the results by the withdraw_status field.
func ByWithdrawStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWithdrawStatus, opts...).ToFunc()
}

// ByWebHook orders the results by the web_hook field.
func ByWebHook(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebHook, opts...).ToFunc()
}

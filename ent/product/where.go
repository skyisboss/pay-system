// Code generated by ent, DO NOT EDIT.

package product

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeletedAt, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppID, v))
}

// AppType applies equality check predicate on the "app_type" field. It's identical to AppTypeEQ.
func AppType(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppType, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppName, v))
}

// AppSecret applies equality check predicate on the "app_secret" field. It's identical to AppSecretEQ.
func AppSecret(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppSecret, v))
}

// AppStatus applies equality check predicate on the "app_status" field. It's identical to AppStatusEQ.
func AppStatus(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppStatus, v))
}

// WithdrawStatus applies equality check predicate on the "withdraw_status" field. It's identical to WithdrawStatusEQ.
func WithdrawStatus(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWithdrawStatus, v))
}

// WebHook applies equality check predicate on the "web_hook" field. It's identical to WebHookEQ.
func WebHook(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWebHook, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldDeletedAt))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldAppID, v))
}

// AppTypeEQ applies the EQ predicate on the "app_type" field.
func AppTypeEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppType, v))
}

// AppTypeNEQ applies the NEQ predicate on the "app_type" field.
func AppTypeNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldAppType, v))
}

// AppTypeIn applies the In predicate on the "app_type" field.
func AppTypeIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldAppType, vs...))
}

// AppTypeNotIn applies the NotIn predicate on the "app_type" field.
func AppTypeNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldAppType, vs...))
}

// AppTypeGT applies the GT predicate on the "app_type" field.
func AppTypeGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldAppType, v))
}

// AppTypeGTE applies the GTE predicate on the "app_type" field.
func AppTypeGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldAppType, v))
}

// AppTypeLT applies the LT predicate on the "app_type" field.
func AppTypeLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldAppType, v))
}

// AppTypeLTE applies the LTE predicate on the "app_type" field.
func AppTypeLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldAppType, v))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldAppName, v))
}

// AppSecretEQ applies the EQ predicate on the "app_secret" field.
func AppSecretEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppSecret, v))
}

// AppSecretNEQ applies the NEQ predicate on the "app_secret" field.
func AppSecretNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldAppSecret, v))
}

// AppSecretIn applies the In predicate on the "app_secret" field.
func AppSecretIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldAppSecret, vs...))
}

// AppSecretNotIn applies the NotIn predicate on the "app_secret" field.
func AppSecretNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldAppSecret, vs...))
}

// AppSecretGT applies the GT predicate on the "app_secret" field.
func AppSecretGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldAppSecret, v))
}

// AppSecretGTE applies the GTE predicate on the "app_secret" field.
func AppSecretGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldAppSecret, v))
}

// AppSecretLT applies the LT predicate on the "app_secret" field.
func AppSecretLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldAppSecret, v))
}

// AppSecretLTE applies the LTE predicate on the "app_secret" field.
func AppSecretLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldAppSecret, v))
}

// AppSecretContains applies the Contains predicate on the "app_secret" field.
func AppSecretContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldAppSecret, v))
}

// AppSecretHasPrefix applies the HasPrefix predicate on the "app_secret" field.
func AppSecretHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldAppSecret, v))
}

// AppSecretHasSuffix applies the HasSuffix predicate on the "app_secret" field.
func AppSecretHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldAppSecret, v))
}

// AppSecretEqualFold applies the EqualFold predicate on the "app_secret" field.
func AppSecretEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldAppSecret, v))
}

// AppSecretContainsFold applies the ContainsFold predicate on the "app_secret" field.
func AppSecretContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldAppSecret, v))
}

// AppStatusEQ applies the EQ predicate on the "app_status" field.
func AppStatusEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldAppStatus, v))
}

// AppStatusNEQ applies the NEQ predicate on the "app_status" field.
func AppStatusNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldAppStatus, v))
}

// AppStatusIn applies the In predicate on the "app_status" field.
func AppStatusIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldAppStatus, vs...))
}

// AppStatusNotIn applies the NotIn predicate on the "app_status" field.
func AppStatusNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldAppStatus, vs...))
}

// AppStatusGT applies the GT predicate on the "app_status" field.
func AppStatusGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldAppStatus, v))
}

// AppStatusGTE applies the GTE predicate on the "app_status" field.
func AppStatusGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldAppStatus, v))
}

// AppStatusLT applies the LT predicate on the "app_status" field.
func AppStatusLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldAppStatus, v))
}

// AppStatusLTE applies the LTE predicate on the "app_status" field.
func AppStatusLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldAppStatus, v))
}

// WithdrawStatusEQ applies the EQ predicate on the "withdraw_status" field.
func WithdrawStatusEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWithdrawStatus, v))
}

// WithdrawStatusNEQ applies the NEQ predicate on the "withdraw_status" field.
func WithdrawStatusNEQ(v int64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldWithdrawStatus, v))
}

// WithdrawStatusIn applies the In predicate on the "withdraw_status" field.
func WithdrawStatusIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldWithdrawStatus, vs...))
}

// WithdrawStatusNotIn applies the NotIn predicate on the "withdraw_status" field.
func WithdrawStatusNotIn(vs ...int64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldWithdrawStatus, vs...))
}

// WithdrawStatusGT applies the GT predicate on the "withdraw_status" field.
func WithdrawStatusGT(v int64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldWithdrawStatus, v))
}

// WithdrawStatusGTE applies the GTE predicate on the "withdraw_status" field.
func WithdrawStatusGTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldWithdrawStatus, v))
}

// WithdrawStatusLT applies the LT predicate on the "withdraw_status" field.
func WithdrawStatusLT(v int64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldWithdrawStatus, v))
}

// WithdrawStatusLTE applies the LTE predicate on the "withdraw_status" field.
func WithdrawStatusLTE(v int64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldWithdrawStatus, v))
}

// WebHookEQ applies the EQ predicate on the "web_hook" field.
func WebHookEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWebHook, v))
}

// WebHookNEQ applies the NEQ predicate on the "web_hook" field.
func WebHookNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldWebHook, v))
}

// WebHookIn applies the In predicate on the "web_hook" field.
func WebHookIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldWebHook, vs...))
}

// WebHookNotIn applies the NotIn predicate on the "web_hook" field.
func WebHookNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldWebHook, vs...))
}

// WebHookGT applies the GT predicate on the "web_hook" field.
func WebHookGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldWebHook, v))
}

// WebHookGTE applies the GTE predicate on the "web_hook" field.
func WebHookGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldWebHook, v))
}

// WebHookLT applies the LT predicate on the "web_hook" field.
func WebHookLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldWebHook, v))
}

// WebHookLTE applies the LTE predicate on the "web_hook" field.
func WebHookLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldWebHook, v))
}

// WebHookContains applies the Contains predicate on the "web_hook" field.
func WebHookContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldWebHook, v))
}

// WebHookHasPrefix applies the HasPrefix predicate on the "web_hook" field.
func WebHookHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldWebHook, v))
}

// WebHookHasSuffix applies the HasSuffix predicate on the "web_hook" field.
func WebHookHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldWebHook, v))
}

// WebHookEqualFold applies the EqualFold predicate on the "web_hook" field.
func WebHookEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldWebHook, v))
}

// WebHookContainsFold applies the ContainsFold predicate on the "web_hook" field.
func WebHookContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldWebHook, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/notify"
)

// Notify is the model entity for the Notify schema.
type Notify struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID uint64 `json:"chain_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID uint64 `json:"product_id,omitempty"`
	// id关联来自
	ItemFrom uint64 `json:"item_from,omitempty"`
	// ItemType holds the value of the "item_type" field.
	ItemType int64 `json:"item_type,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// NotifyType holds the value of the "notify_type" field.
	NotifyType string `json:"notify_type,omitempty"`
	// SendURL holds the value of the "send_url" field.
	SendURL string `json:"send_url,omitempty"`
	// SendBody holds the value of the "send_body" field.
	SendBody string `json:"send_body,omitempty"`
	// SendRetry holds the value of the "send_retry" field.
	SendRetry int64 `json:"send_retry,omitempty"`
	// HandleStatus holds the value of the "handle_status" field.
	HandleStatus int64 `json:"handle_status,omitempty"`
	// HandleMsg holds the value of the "handle_msg" field.
	HandleMsg string `json:"handle_msg,omitempty"`
	// HandleTime holds the value of the "handle_time" field.
	HandleTime   time.Time `json:"handle_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notify) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notify.FieldID, notify.FieldChainID, notify.FieldProductID, notify.FieldItemFrom, notify.FieldItemType, notify.FieldSendRetry, notify.FieldHandleStatus:
			values[i] = new(sql.NullInt64)
		case notify.FieldNonce, notify.FieldNotifyType, notify.FieldSendURL, notify.FieldSendBody, notify.FieldHandleMsg:
			values[i] = new(sql.NullString)
		case notify.FieldCreatedAt, notify.FieldUpdatedAt, notify.FieldDeletedAt, notify.FieldHandleTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notify fields.
func (n *Notify) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notify.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = uint64(value.Int64)
		case notify.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notify.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notify.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				n.DeletedAt = value.Time
			}
		case notify.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				n.ChainID = uint64(value.Int64)
			}
		case notify.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				n.ProductID = uint64(value.Int64)
			}
		case notify.FieldItemFrom:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_from", values[i])
			} else if value.Valid {
				n.ItemFrom = uint64(value.Int64)
			}
		case notify.FieldItemType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_type", values[i])
			} else if value.Valid {
				n.ItemType = value.Int64
			}
		case notify.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				n.Nonce = value.String
			}
		case notify.FieldNotifyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notify_type", values[i])
			} else if value.Valid {
				n.NotifyType = value.String
			}
		case notify.FieldSendURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field send_url", values[i])
			} else if value.Valid {
				n.SendURL = value.String
			}
		case notify.FieldSendBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field send_body", values[i])
			} else if value.Valid {
				n.SendBody = value.String
			}
		case notify.FieldSendRetry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_retry", values[i])
			} else if value.Valid {
				n.SendRetry = value.Int64
			}
		case notify.FieldHandleStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field handle_status", values[i])
			} else if value.Valid {
				n.HandleStatus = value.Int64
			}
		case notify.FieldHandleMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle_msg", values[i])
			} else if value.Valid {
				n.HandleMsg = value.String
			}
		case notify.FieldHandleTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field handle_time", values[i])
			} else if value.Valid {
				n.HandleTime = value.Time
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Notify.
// This includes values selected through modifiers, order, etc.
func (n *Notify) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// Update returns a builder for updating this Notify.
// Note that you need to call Notify.Unwrap() before calling this method if this Notify
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notify) Update() *NotifyUpdateOne {
	return NewNotifyClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Notify entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notify) Unwrap() *Notify {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notify is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notify) String() string {
	var builder strings.Builder
	builder.WriteString("Notify(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(n.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ChainID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", n.ProductID))
	builder.WriteString(", ")
	builder.WriteString("item_from=")
	builder.WriteString(fmt.Sprintf("%v", n.ItemFrom))
	builder.WriteString(", ")
	builder.WriteString("item_type=")
	builder.WriteString(fmt.Sprintf("%v", n.ItemType))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(n.Nonce)
	builder.WriteString(", ")
	builder.WriteString("notify_type=")
	builder.WriteString(n.NotifyType)
	builder.WriteString(", ")
	builder.WriteString("send_url=")
	builder.WriteString(n.SendURL)
	builder.WriteString(", ")
	builder.WriteString("send_body=")
	builder.WriteString(n.SendBody)
	builder.WriteString(", ")
	builder.WriteString("send_retry=")
	builder.WriteString(fmt.Sprintf("%v", n.SendRetry))
	builder.WriteString(", ")
	builder.WriteString("handle_status=")
	builder.WriteString(fmt.Sprintf("%v", n.HandleStatus))
	builder.WriteString(", ")
	builder.WriteString("handle_msg=")
	builder.WriteString(n.HandleMsg)
	builder.WriteString(", ")
	builder.WriteString("handle_time=")
	builder.WriteString(n.HandleTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Notifies is a parsable slice of Notify.
type Notifies []*Notify

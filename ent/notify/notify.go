// Code generated by ent, DO NOT EDIT.

package notify

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the notify type in the database.
	Label = "notify"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldItemFrom holds the string denoting the item_from field in the database.
	FieldItemFrom = "item_from"
	// FieldItemType holds the string denoting the item_type field in the database.
	FieldItemType = "item_type"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldNotifyType holds the string denoting the notify_type field in the database.
	FieldNotifyType = "notify_type"
	// FieldSendURL holds the string denoting the send_url field in the database.
	FieldSendURL = "send_url"
	// FieldSendBody holds the string denoting the send_body field in the database.
	FieldSendBody = "send_body"
	// FieldSendRetry holds the string denoting the send_retry field in the database.
	FieldSendRetry = "send_retry"
	// FieldHandleStatus holds the string denoting the handle_status field in the database.
	FieldHandleStatus = "handle_status"
	// FieldHandleMsg holds the string denoting the handle_msg field in the database.
	FieldHandleMsg = "handle_msg"
	// FieldHandleTime holds the string denoting the handle_time field in the database.
	FieldHandleTime = "handle_time"
	// Table holds the table name of the notify in the database.
	Table = "notify"
)

// Columns holds all SQL columns for notify fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldChainID,
	FieldProductID,
	FieldItemFrom,
	FieldItemType,
	FieldNonce,
	FieldNotifyType,
	FieldSendURL,
	FieldSendBody,
	FieldSendRetry,
	FieldHandleStatus,
	FieldHandleMsg,
	FieldHandleTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultHandleStatus holds the default value on creation for the "handle_status" field.
	DefaultHandleStatus int64
	// DefaultHandleMsg holds the default value on creation for the "handle_msg" field.
	DefaultHandleMsg string
)

// OrderOption defines the ordering options for the Notify queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByItemFrom orders the results by the item_from field.
func ByItemFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemFrom, opts...).ToFunc()
}

// ByItemType orders the results by the item_type field.
func ByItemType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldItemType, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByNotifyType orders the results by the notify_type field.
func ByNotifyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifyType, opts...).ToFunc()
}

// BySendURL orders the results by the send_url field.
func BySendURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendURL, opts...).ToFunc()
}

// BySendBody orders the results by the send_body field.
func BySendBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendBody, opts...).ToFunc()
}

// BySendRetry orders the results by the send_retry field.
func BySendRetry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendRetry, opts...).ToFunc()
}

// ByHandleStatus orders the results by the handle_status field.
func ByHandleStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleStatus, opts...).ToFunc()
}

// ByHandleMsg orders the results by the handle_msg field.
func ByHandleMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleMsg, opts...).ToFunc()
}

// ByHandleTime orders the results by the handle_time field.
func ByHandleTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleTime, opts...).ToFunc()
}

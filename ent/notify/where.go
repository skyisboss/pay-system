// Code generated by ent, DO NOT EDIT.

package notify

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldDeletedAt, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldChainID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldProductID, v))
}

// ItemFrom applies equality check predicate on the "item_from" field. It's identical to ItemFromEQ.
func ItemFrom(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldItemFrom, v))
}

// ItemType applies equality check predicate on the "item_type" field. It's identical to ItemTypeEQ.
func ItemType(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldItemType, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldNonce, v))
}

// NotifyType applies equality check predicate on the "notify_type" field. It's identical to NotifyTypeEQ.
func NotifyType(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldNotifyType, v))
}

// SendURL applies equality check predicate on the "send_url" field. It's identical to SendURLEQ.
func SendURL(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendURL, v))
}

// SendBody applies equality check predicate on the "send_body" field. It's identical to SendBodyEQ.
func SendBody(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendBody, v))
}

// SendRetry applies equality check predicate on the "send_retry" field. It's identical to SendRetryEQ.
func SendRetry(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendRetry, v))
}

// HandleStatus applies equality check predicate on the "handle_status" field. It's identical to HandleStatusEQ.
func HandleStatus(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleStatus, v))
}

// HandleMsg applies equality check predicate on the "handle_msg" field. It's identical to HandleMsgEQ.
func HandleMsg(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleMsg, v))
}

// HandleTime applies equality check predicate on the "handle_time" field. It's identical to HandleTimeEQ.
func HandleTime(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Notify {
	return predicate.Notify(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Notify {
	return predicate.Notify(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Notify {
	return predicate.Notify(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Notify {
	return predicate.Notify(sql.FieldNotNull(FieldDeletedAt))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldChainID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldProductID, v))
}

// ItemFromEQ applies the EQ predicate on the "item_from" field.
func ItemFromEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldItemFrom, v))
}

// ItemFromNEQ applies the NEQ predicate on the "item_from" field.
func ItemFromNEQ(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldItemFrom, v))
}

// ItemFromIn applies the In predicate on the "item_from" field.
func ItemFromIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldItemFrom, vs...))
}

// ItemFromNotIn applies the NotIn predicate on the "item_from" field.
func ItemFromNotIn(vs ...uint64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldItemFrom, vs...))
}

// ItemFromGT applies the GT predicate on the "item_from" field.
func ItemFromGT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldItemFrom, v))
}

// ItemFromGTE applies the GTE predicate on the "item_from" field.
func ItemFromGTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldItemFrom, v))
}

// ItemFromLT applies the LT predicate on the "item_from" field.
func ItemFromLT(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldItemFrom, v))
}

// ItemFromLTE applies the LTE predicate on the "item_from" field.
func ItemFromLTE(v uint64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldItemFrom, v))
}

// ItemTypeEQ applies the EQ predicate on the "item_type" field.
func ItemTypeEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldItemType, v))
}

// ItemTypeNEQ applies the NEQ predicate on the "item_type" field.
func ItemTypeNEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldItemType, v))
}

// ItemTypeIn applies the In predicate on the "item_type" field.
func ItemTypeIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldItemType, vs...))
}

// ItemTypeNotIn applies the NotIn predicate on the "item_type" field.
func ItemTypeNotIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldItemType, vs...))
}

// ItemTypeGT applies the GT predicate on the "item_type" field.
func ItemTypeGT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldItemType, v))
}

// ItemTypeGTE applies the GTE predicate on the "item_type" field.
func ItemTypeGTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldItemType, v))
}

// ItemTypeLT applies the LT predicate on the "item_type" field.
func ItemTypeLT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldItemType, v))
}

// ItemTypeLTE applies the LTE predicate on the "item_type" field.
func ItemTypeLTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldItemType, v))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldNonce, v))
}

// NonceContains applies the Contains predicate on the "nonce" field.
func NonceContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldNonce, v))
}

// NonceHasPrefix applies the HasPrefix predicate on the "nonce" field.
func NonceHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldNonce, v))
}

// NonceHasSuffix applies the HasSuffix predicate on the "nonce" field.
func NonceHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldNonce, v))
}

// NonceEqualFold applies the EqualFold predicate on the "nonce" field.
func NonceEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldNonce, v))
}

// NonceContainsFold applies the ContainsFold predicate on the "nonce" field.
func NonceContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldNonce, v))
}

// NotifyTypeEQ applies the EQ predicate on the "notify_type" field.
func NotifyTypeEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldNotifyType, v))
}

// NotifyTypeNEQ applies the NEQ predicate on the "notify_type" field.
func NotifyTypeNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldNotifyType, v))
}

// NotifyTypeIn applies the In predicate on the "notify_type" field.
func NotifyTypeIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldNotifyType, vs...))
}

// NotifyTypeNotIn applies the NotIn predicate on the "notify_type" field.
func NotifyTypeNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldNotifyType, vs...))
}

// NotifyTypeGT applies the GT predicate on the "notify_type" field.
func NotifyTypeGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldNotifyType, v))
}

// NotifyTypeGTE applies the GTE predicate on the "notify_type" field.
func NotifyTypeGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldNotifyType, v))
}

// NotifyTypeLT applies the LT predicate on the "notify_type" field.
func NotifyTypeLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldNotifyType, v))
}

// NotifyTypeLTE applies the LTE predicate on the "notify_type" field.
func NotifyTypeLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldNotifyType, v))
}

// NotifyTypeContains applies the Contains predicate on the "notify_type" field.
func NotifyTypeContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldNotifyType, v))
}

// NotifyTypeHasPrefix applies the HasPrefix predicate on the "notify_type" field.
func NotifyTypeHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldNotifyType, v))
}

// NotifyTypeHasSuffix applies the HasSuffix predicate on the "notify_type" field.
func NotifyTypeHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldNotifyType, v))
}

// NotifyTypeEqualFold applies the EqualFold predicate on the "notify_type" field.
func NotifyTypeEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldNotifyType, v))
}

// NotifyTypeContainsFold applies the ContainsFold predicate on the "notify_type" field.
func NotifyTypeContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldNotifyType, v))
}

// SendURLEQ applies the EQ predicate on the "send_url" field.
func SendURLEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendURL, v))
}

// SendURLNEQ applies the NEQ predicate on the "send_url" field.
func SendURLNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldSendURL, v))
}

// SendURLIn applies the In predicate on the "send_url" field.
func SendURLIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldSendURL, vs...))
}

// SendURLNotIn applies the NotIn predicate on the "send_url" field.
func SendURLNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldSendURL, vs...))
}

// SendURLGT applies the GT predicate on the "send_url" field.
func SendURLGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldSendURL, v))
}

// SendURLGTE applies the GTE predicate on the "send_url" field.
func SendURLGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldSendURL, v))
}

// SendURLLT applies the LT predicate on the "send_url" field.
func SendURLLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldSendURL, v))
}

// SendURLLTE applies the LTE predicate on the "send_url" field.
func SendURLLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldSendURL, v))
}

// SendURLContains applies the Contains predicate on the "send_url" field.
func SendURLContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldSendURL, v))
}

// SendURLHasPrefix applies the HasPrefix predicate on the "send_url" field.
func SendURLHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldSendURL, v))
}

// SendURLHasSuffix applies the HasSuffix predicate on the "send_url" field.
func SendURLHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldSendURL, v))
}

// SendURLEqualFold applies the EqualFold predicate on the "send_url" field.
func SendURLEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldSendURL, v))
}

// SendURLContainsFold applies the ContainsFold predicate on the "send_url" field.
func SendURLContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldSendURL, v))
}

// SendBodyEQ applies the EQ predicate on the "send_body" field.
func SendBodyEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendBody, v))
}

// SendBodyNEQ applies the NEQ predicate on the "send_body" field.
func SendBodyNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldSendBody, v))
}

// SendBodyIn applies the In predicate on the "send_body" field.
func SendBodyIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldSendBody, vs...))
}

// SendBodyNotIn applies the NotIn predicate on the "send_body" field.
func SendBodyNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldSendBody, vs...))
}

// SendBodyGT applies the GT predicate on the "send_body" field.
func SendBodyGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldSendBody, v))
}

// SendBodyGTE applies the GTE predicate on the "send_body" field.
func SendBodyGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldSendBody, v))
}

// SendBodyLT applies the LT predicate on the "send_body" field.
func SendBodyLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldSendBody, v))
}

// SendBodyLTE applies the LTE predicate on the "send_body" field.
func SendBodyLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldSendBody, v))
}

// SendBodyContains applies the Contains predicate on the "send_body" field.
func SendBodyContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldSendBody, v))
}

// SendBodyHasPrefix applies the HasPrefix predicate on the "send_body" field.
func SendBodyHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldSendBody, v))
}

// SendBodyHasSuffix applies the HasSuffix predicate on the "send_body" field.
func SendBodyHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldSendBody, v))
}

// SendBodyEqualFold applies the EqualFold predicate on the "send_body" field.
func SendBodyEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldSendBody, v))
}

// SendBodyContainsFold applies the ContainsFold predicate on the "send_body" field.
func SendBodyContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldSendBody, v))
}

// SendRetryEQ applies the EQ predicate on the "send_retry" field.
func SendRetryEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldSendRetry, v))
}

// SendRetryNEQ applies the NEQ predicate on the "send_retry" field.
func SendRetryNEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldSendRetry, v))
}

// SendRetryIn applies the In predicate on the "send_retry" field.
func SendRetryIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldSendRetry, vs...))
}

// SendRetryNotIn applies the NotIn predicate on the "send_retry" field.
func SendRetryNotIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldSendRetry, vs...))
}

// SendRetryGT applies the GT predicate on the "send_retry" field.
func SendRetryGT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldSendRetry, v))
}

// SendRetryGTE applies the GTE predicate on the "send_retry" field.
func SendRetryGTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldSendRetry, v))
}

// SendRetryLT applies the LT predicate on the "send_retry" field.
func SendRetryLT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldSendRetry, v))
}

// SendRetryLTE applies the LTE predicate on the "send_retry" field.
func SendRetryLTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldSendRetry, v))
}

// HandleStatusEQ applies the EQ predicate on the "handle_status" field.
func HandleStatusEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleStatus, v))
}

// HandleStatusNEQ applies the NEQ predicate on the "handle_status" field.
func HandleStatusNEQ(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldHandleStatus, v))
}

// HandleStatusIn applies the In predicate on the "handle_status" field.
func HandleStatusIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldHandleStatus, vs...))
}

// HandleStatusNotIn applies the NotIn predicate on the "handle_status" field.
func HandleStatusNotIn(vs ...int64) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldHandleStatus, vs...))
}

// HandleStatusGT applies the GT predicate on the "handle_status" field.
func HandleStatusGT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldHandleStatus, v))
}

// HandleStatusGTE applies the GTE predicate on the "handle_status" field.
func HandleStatusGTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldHandleStatus, v))
}

// HandleStatusLT applies the LT predicate on the "handle_status" field.
func HandleStatusLT(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldHandleStatus, v))
}

// HandleStatusLTE applies the LTE predicate on the "handle_status" field.
func HandleStatusLTE(v int64) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldHandleStatus, v))
}

// HandleMsgEQ applies the EQ predicate on the "handle_msg" field.
func HandleMsgEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleMsg, v))
}

// HandleMsgNEQ applies the NEQ predicate on the "handle_msg" field.
func HandleMsgNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldHandleMsg, v))
}

// HandleMsgIn applies the In predicate on the "handle_msg" field.
func HandleMsgIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldHandleMsg, vs...))
}

// HandleMsgNotIn applies the NotIn predicate on the "handle_msg" field.
func HandleMsgNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldHandleMsg, vs...))
}

// HandleMsgGT applies the GT predicate on the "handle_msg" field.
func HandleMsgGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldHandleMsg, v))
}

// HandleMsgGTE applies the GTE predicate on the "handle_msg" field.
func HandleMsgGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldHandleMsg, v))
}

// HandleMsgLT applies the LT predicate on the "handle_msg" field.
func HandleMsgLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldHandleMsg, v))
}

// HandleMsgLTE applies the LTE predicate on the "handle_msg" field.
func HandleMsgLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldHandleMsg, v))
}

// HandleMsgContains applies the Contains predicate on the "handle_msg" field.
func HandleMsgContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldHandleMsg, v))
}

// HandleMsgHasPrefix applies the HasPrefix predicate on the "handle_msg" field.
func HandleMsgHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldHandleMsg, v))
}

// HandleMsgHasSuffix applies the HasSuffix predicate on the "handle_msg" field.
func HandleMsgHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldHandleMsg, v))
}

// HandleMsgEqualFold applies the EqualFold predicate on the "handle_msg" field.
func HandleMsgEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldHandleMsg, v))
}

// HandleMsgContainsFold applies the ContainsFold predicate on the "handle_msg" field.
func HandleMsgContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldHandleMsg, v))
}

// HandleTimeEQ applies the EQ predicate on the "handle_time" field.
func HandleTimeEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldHandleTime, v))
}

// HandleTimeNEQ applies the NEQ predicate on the "handle_time" field.
func HandleTimeNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldHandleTime, v))
}

// HandleTimeIn applies the In predicate on the "handle_time" field.
func HandleTimeIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldHandleTime, vs...))
}

// HandleTimeNotIn applies the NotIn predicate on the "handle_time" field.
func HandleTimeNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldHandleTime, vs...))
}

// HandleTimeGT applies the GT predicate on the "handle_time" field.
func HandleTimeGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldHandleTime, v))
}

// HandleTimeGTE applies the GTE predicate on the "handle_time" field.
func HandleTimeGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldHandleTime, v))
}

// HandleTimeLT applies the LT predicate on the "handle_time" field.
func HandleTimeLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldHandleTime, v))
}

// HandleTimeLTE applies the LTE predicate on the "handle_time" field.
func HandleTimeLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldHandleTime, v))
}

// HandleTimeIsNil applies the IsNil predicate on the "handle_time" field.
func HandleTimeIsNil() predicate.Notify {
	return predicate.Notify(sql.FieldIsNull(FieldHandleTime))
}

// HandleTimeNotNil applies the NotNil predicate on the "handle_time" field.
func HandleTimeNotNil() predicate.Notify {
	return predicate.Notify(sql.FieldNotNull(FieldHandleTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.NotPredicates(p))
}

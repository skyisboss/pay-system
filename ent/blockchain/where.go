// Code generated by ent, DO NOT EDIT.

package blockchain

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldDeletedAt, v))
}

// Chain applies equality check predicate on the "chain" field. It's identical to ChainEQ.
func Chain(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldChain, v))
}

// Types applies equality check predicate on the "types" field. It's identical to TypesEQ.
func Types(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTypes, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldSymbol, v))
}

// Decimals applies equality check predicate on the "decimals" field. It's identical to DecimalsEQ.
func Decimals(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldDecimals, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldStatus, v))
}

// TokenAddress applies equality check predicate on the "token_address" field. It's identical to TokenAddressEQ.
func TokenAddress(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTokenAddress, v))
}

// TokenAbi applies equality check predicate on the "token_abi" field. It's identical to TokenAbiEQ.
func TokenAbi(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTokenAbi, v))
}

// ColdAddress applies equality check predicate on the "cold_address" field. It's identical to ColdAddressEQ.
func ColdAddress(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldColdAddress, v))
}

// HotAddress applies equality check predicate on the "hot_address" field. It's identical to HotAddressEQ.
func HotAddress(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldHotAddress, v))
}

// ScanBlockNum applies equality check predicate on the "scan_block_num" field. It's identical to ScanBlockNumEQ.
func ScanBlockNum(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldScanBlockNum, v))
}

// MinFreeNum applies equality check predicate on the "min_free_num" field. It's identical to MinFreeNumEQ.
func MinFreeNum(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinFreeNum, v))
}

// MinConfirmNum applies equality check predicate on the "min_confirm_num" field. It's identical to MinConfirmNumEQ.
func MinConfirmNum(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinConfirmNum, v))
}

// WithdrawFee applies equality check predicate on the "withdraw_fee" field. It's identical to WithdrawFeeEQ.
func WithdrawFee(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldWithdrawFee, v))
}

// WithdrawFeeType applies equality check predicate on the "withdraw_fee_type" field. It's identical to WithdrawFeeTypeEQ.
func WithdrawFeeType(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldWithdrawFeeType, v))
}

// MinDeposit applies equality check predicate on the "min_deposit" field. It's identical to MinDepositEQ.
func MinDeposit(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinDeposit, v))
}

// MinWithdraw applies equality check predicate on the "min_withdraw" field. It's identical to MinWithdrawEQ.
func MinWithdraw(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinWithdraw, v))
}

// MinCollect applies equality check predicate on the "min_collect" field. It's identical to MinCollectEQ.
func MinCollect(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinCollect, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotNull(FieldDeletedAt))
}

// ChainEQ applies the EQ predicate on the "chain" field.
func ChainEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldChain, v))
}

// ChainNEQ applies the NEQ predicate on the "chain" field.
func ChainNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldChain, v))
}

// ChainIn applies the In predicate on the "chain" field.
func ChainIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldChain, vs...))
}

// ChainNotIn applies the NotIn predicate on the "chain" field.
func ChainNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldChain, vs...))
}

// ChainGT applies the GT predicate on the "chain" field.
func ChainGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldChain, v))
}

// ChainGTE applies the GTE predicate on the "chain" field.
func ChainGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldChain, v))
}

// ChainLT applies the LT predicate on the "chain" field.
func ChainLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldChain, v))
}

// ChainLTE applies the LTE predicate on the "chain" field.
func ChainLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldChain, v))
}

// ChainContains applies the Contains predicate on the "chain" field.
func ChainContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldChain, v))
}

// ChainHasPrefix applies the HasPrefix predicate on the "chain" field.
func ChainHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldChain, v))
}

// ChainHasSuffix applies the HasSuffix predicate on the "chain" field.
func ChainHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldChain, v))
}

// ChainEqualFold applies the EqualFold predicate on the "chain" field.
func ChainEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldChain, v))
}

// ChainContainsFold applies the ContainsFold predicate on the "chain" field.
func ChainContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldChain, v))
}

// TypesEQ applies the EQ predicate on the "types" field.
func TypesEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTypes, v))
}

// TypesNEQ applies the NEQ predicate on the "types" field.
func TypesNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldTypes, v))
}

// TypesIn applies the In predicate on the "types" field.
func TypesIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldTypes, vs...))
}

// TypesNotIn applies the NotIn predicate on the "types" field.
func TypesNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldTypes, vs...))
}

// TypesGT applies the GT predicate on the "types" field.
func TypesGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldTypes, v))
}

// TypesGTE applies the GTE predicate on the "types" field.
func TypesGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldTypes, v))
}

// TypesLT applies the LT predicate on the "types" field.
func TypesLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldTypes, v))
}

// TypesLTE applies the LTE predicate on the "types" field.
func TypesLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldTypes, v))
}

// TypesContains applies the Contains predicate on the "types" field.
func TypesContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldTypes, v))
}

// TypesHasPrefix applies the HasPrefix predicate on the "types" field.
func TypesHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldTypes, v))
}

// TypesHasSuffix applies the HasSuffix predicate on the "types" field.
func TypesHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldTypes, v))
}

// TypesEqualFold applies the EqualFold predicate on the "types" field.
func TypesEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldTypes, v))
}

// TypesContainsFold applies the ContainsFold predicate on the "types" field.
func TypesContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldTypes, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldSymbol, v))
}

// DecimalsEQ applies the EQ predicate on the "decimals" field.
func DecimalsEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldDecimals, v))
}

// DecimalsNEQ applies the NEQ predicate on the "decimals" field.
func DecimalsNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldDecimals, v))
}

// DecimalsIn applies the In predicate on the "decimals" field.
func DecimalsIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldDecimals, vs...))
}

// DecimalsNotIn applies the NotIn predicate on the "decimals" field.
func DecimalsNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldDecimals, vs...))
}

// DecimalsGT applies the GT predicate on the "decimals" field.
func DecimalsGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldDecimals, v))
}

// DecimalsGTE applies the GTE predicate on the "decimals" field.
func DecimalsGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldDecimals, v))
}

// DecimalsLT applies the LT predicate on the "decimals" field.
func DecimalsLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldDecimals, v))
}

// DecimalsLTE applies the LTE predicate on the "decimals" field.
func DecimalsLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldDecimals, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldStatus, v))
}

// TokenAddressEQ applies the EQ predicate on the "token_address" field.
func TokenAddressEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTokenAddress, v))
}

// TokenAddressNEQ applies the NEQ predicate on the "token_address" field.
func TokenAddressNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldTokenAddress, v))
}

// TokenAddressIn applies the In predicate on the "token_address" field.
func TokenAddressIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldTokenAddress, vs...))
}

// TokenAddressNotIn applies the NotIn predicate on the "token_address" field.
func TokenAddressNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldTokenAddress, vs...))
}

// TokenAddressGT applies the GT predicate on the "token_address" field.
func TokenAddressGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldTokenAddress, v))
}

// TokenAddressGTE applies the GTE predicate on the "token_address" field.
func TokenAddressGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldTokenAddress, v))
}

// TokenAddressLT applies the LT predicate on the "token_address" field.
func TokenAddressLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldTokenAddress, v))
}

// TokenAddressLTE applies the LTE predicate on the "token_address" field.
func TokenAddressLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldTokenAddress, v))
}

// TokenAddressContains applies the Contains predicate on the "token_address" field.
func TokenAddressContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldTokenAddress, v))
}

// TokenAddressHasPrefix applies the HasPrefix predicate on the "token_address" field.
func TokenAddressHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldTokenAddress, v))
}

// TokenAddressHasSuffix applies the HasSuffix predicate on the "token_address" field.
func TokenAddressHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldTokenAddress, v))
}

// TokenAddressEqualFold applies the EqualFold predicate on the "token_address" field.
func TokenAddressEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldTokenAddress, v))
}

// TokenAddressContainsFold applies the ContainsFold predicate on the "token_address" field.
func TokenAddressContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldTokenAddress, v))
}

// TokenAbiEQ applies the EQ predicate on the "token_abi" field.
func TokenAbiEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldTokenAbi, v))
}

// TokenAbiNEQ applies the NEQ predicate on the "token_abi" field.
func TokenAbiNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldTokenAbi, v))
}

// TokenAbiIn applies the In predicate on the "token_abi" field.
func TokenAbiIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldTokenAbi, vs...))
}

// TokenAbiNotIn applies the NotIn predicate on the "token_abi" field.
func TokenAbiNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldTokenAbi, vs...))
}

// TokenAbiGT applies the GT predicate on the "token_abi" field.
func TokenAbiGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldTokenAbi, v))
}

// TokenAbiGTE applies the GTE predicate on the "token_abi" field.
func TokenAbiGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldTokenAbi, v))
}

// TokenAbiLT applies the LT predicate on the "token_abi" field.
func TokenAbiLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldTokenAbi, v))
}

// TokenAbiLTE applies the LTE predicate on the "token_abi" field.
func TokenAbiLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldTokenAbi, v))
}

// TokenAbiContains applies the Contains predicate on the "token_abi" field.
func TokenAbiContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldTokenAbi, v))
}

// TokenAbiHasPrefix applies the HasPrefix predicate on the "token_abi" field.
func TokenAbiHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldTokenAbi, v))
}

// TokenAbiHasSuffix applies the HasSuffix predicate on the "token_abi" field.
func TokenAbiHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldTokenAbi, v))
}

// TokenAbiIsNil applies the IsNil predicate on the "token_abi" field.
func TokenAbiIsNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIsNull(FieldTokenAbi))
}

// TokenAbiNotNil applies the NotNil predicate on the "token_abi" field.
func TokenAbiNotNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotNull(FieldTokenAbi))
}

// TokenAbiEqualFold applies the EqualFold predicate on the "token_abi" field.
func TokenAbiEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldTokenAbi, v))
}

// TokenAbiContainsFold applies the ContainsFold predicate on the "token_abi" field.
func TokenAbiContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldTokenAbi, v))
}

// ColdAddressEQ applies the EQ predicate on the "cold_address" field.
func ColdAddressEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldColdAddress, v))
}

// ColdAddressNEQ applies the NEQ predicate on the "cold_address" field.
func ColdAddressNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldColdAddress, v))
}

// ColdAddressIn applies the In predicate on the "cold_address" field.
func ColdAddressIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldColdAddress, vs...))
}

// ColdAddressNotIn applies the NotIn predicate on the "cold_address" field.
func ColdAddressNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldColdAddress, vs...))
}

// ColdAddressGT applies the GT predicate on the "cold_address" field.
func ColdAddressGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldColdAddress, v))
}

// ColdAddressGTE applies the GTE predicate on the "cold_address" field.
func ColdAddressGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldColdAddress, v))
}

// ColdAddressLT applies the LT predicate on the "cold_address" field.
func ColdAddressLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldColdAddress, v))
}

// ColdAddressLTE applies the LTE predicate on the "cold_address" field.
func ColdAddressLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldColdAddress, v))
}

// ColdAddressContains applies the Contains predicate on the "cold_address" field.
func ColdAddressContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldColdAddress, v))
}

// ColdAddressHasPrefix applies the HasPrefix predicate on the "cold_address" field.
func ColdAddressHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldColdAddress, v))
}

// ColdAddressHasSuffix applies the HasSuffix predicate on the "cold_address" field.
func ColdAddressHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldColdAddress, v))
}

// ColdAddressEqualFold applies the EqualFold predicate on the "cold_address" field.
func ColdAddressEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldColdAddress, v))
}

// ColdAddressContainsFold applies the ContainsFold predicate on the "cold_address" field.
func ColdAddressContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldColdAddress, v))
}

// HotAddressEQ applies the EQ predicate on the "hot_address" field.
func HotAddressEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldHotAddress, v))
}

// HotAddressNEQ applies the NEQ predicate on the "hot_address" field.
func HotAddressNEQ(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldHotAddress, v))
}

// HotAddressIn applies the In predicate on the "hot_address" field.
func HotAddressIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldHotAddress, vs...))
}

// HotAddressNotIn applies the NotIn predicate on the "hot_address" field.
func HotAddressNotIn(vs ...string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldHotAddress, vs...))
}

// HotAddressGT applies the GT predicate on the "hot_address" field.
func HotAddressGT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldHotAddress, v))
}

// HotAddressGTE applies the GTE predicate on the "hot_address" field.
func HotAddressGTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldHotAddress, v))
}

// HotAddressLT applies the LT predicate on the "hot_address" field.
func HotAddressLT(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldHotAddress, v))
}

// HotAddressLTE applies the LTE predicate on the "hot_address" field.
func HotAddressLTE(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldHotAddress, v))
}

// HotAddressContains applies the Contains predicate on the "hot_address" field.
func HotAddressContains(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContains(FieldHotAddress, v))
}

// HotAddressHasPrefix applies the HasPrefix predicate on the "hot_address" field.
func HotAddressHasPrefix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasPrefix(FieldHotAddress, v))
}

// HotAddressHasSuffix applies the HasSuffix predicate on the "hot_address" field.
func HotAddressHasSuffix(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldHasSuffix(FieldHotAddress, v))
}

// HotAddressEqualFold applies the EqualFold predicate on the "hot_address" field.
func HotAddressEqualFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEqualFold(FieldHotAddress, v))
}

// HotAddressContainsFold applies the ContainsFold predicate on the "hot_address" field.
func HotAddressContainsFold(v string) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldContainsFold(FieldHotAddress, v))
}

// ScanBlockNumEQ applies the EQ predicate on the "scan_block_num" field.
func ScanBlockNumEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldScanBlockNum, v))
}

// ScanBlockNumNEQ applies the NEQ predicate on the "scan_block_num" field.
func ScanBlockNumNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldScanBlockNum, v))
}

// ScanBlockNumIn applies the In predicate on the "scan_block_num" field.
func ScanBlockNumIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldScanBlockNum, vs...))
}

// ScanBlockNumNotIn applies the NotIn predicate on the "scan_block_num" field.
func ScanBlockNumNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldScanBlockNum, vs...))
}

// ScanBlockNumGT applies the GT predicate on the "scan_block_num" field.
func ScanBlockNumGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldScanBlockNum, v))
}

// ScanBlockNumGTE applies the GTE predicate on the "scan_block_num" field.
func ScanBlockNumGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldScanBlockNum, v))
}

// ScanBlockNumLT applies the LT predicate on the "scan_block_num" field.
func ScanBlockNumLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldScanBlockNum, v))
}

// ScanBlockNumLTE applies the LTE predicate on the "scan_block_num" field.
func ScanBlockNumLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldScanBlockNum, v))
}

// MinFreeNumEQ applies the EQ predicate on the "min_free_num" field.
func MinFreeNumEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinFreeNum, v))
}

// MinFreeNumNEQ applies the NEQ predicate on the "min_free_num" field.
func MinFreeNumNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldMinFreeNum, v))
}

// MinFreeNumIn applies the In predicate on the "min_free_num" field.
func MinFreeNumIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldMinFreeNum, vs...))
}

// MinFreeNumNotIn applies the NotIn predicate on the "min_free_num" field.
func MinFreeNumNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldMinFreeNum, vs...))
}

// MinFreeNumGT applies the GT predicate on the "min_free_num" field.
func MinFreeNumGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldMinFreeNum, v))
}

// MinFreeNumGTE applies the GTE predicate on the "min_free_num" field.
func MinFreeNumGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldMinFreeNum, v))
}

// MinFreeNumLT applies the LT predicate on the "min_free_num" field.
func MinFreeNumLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldMinFreeNum, v))
}

// MinFreeNumLTE applies the LTE predicate on the "min_free_num" field.
func MinFreeNumLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldMinFreeNum, v))
}

// MinConfirmNumEQ applies the EQ predicate on the "min_confirm_num" field.
func MinConfirmNumEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinConfirmNum, v))
}

// MinConfirmNumNEQ applies the NEQ predicate on the "min_confirm_num" field.
func MinConfirmNumNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldMinConfirmNum, v))
}

// MinConfirmNumIn applies the In predicate on the "min_confirm_num" field.
func MinConfirmNumIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldMinConfirmNum, vs...))
}

// MinConfirmNumNotIn applies the NotIn predicate on the "min_confirm_num" field.
func MinConfirmNumNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldMinConfirmNum, vs...))
}

// MinConfirmNumGT applies the GT predicate on the "min_confirm_num" field.
func MinConfirmNumGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldMinConfirmNum, v))
}

// MinConfirmNumGTE applies the GTE predicate on the "min_confirm_num" field.
func MinConfirmNumGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldMinConfirmNum, v))
}

// MinConfirmNumLT applies the LT predicate on the "min_confirm_num" field.
func MinConfirmNumLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldMinConfirmNum, v))
}

// MinConfirmNumLTE applies the LTE predicate on the "min_confirm_num" field.
func MinConfirmNumLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldMinConfirmNum, v))
}

// WithdrawFeeEQ applies the EQ predicate on the "withdraw_fee" field.
func WithdrawFeeEQ(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldWithdrawFee, v))
}

// WithdrawFeeNEQ applies the NEQ predicate on the "withdraw_fee" field.
func WithdrawFeeNEQ(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldWithdrawFee, v))
}

// WithdrawFeeIn applies the In predicate on the "withdraw_fee" field.
func WithdrawFeeIn(vs ...float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldWithdrawFee, vs...))
}

// WithdrawFeeNotIn applies the NotIn predicate on the "withdraw_fee" field.
func WithdrawFeeNotIn(vs ...float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldWithdrawFee, vs...))
}

// WithdrawFeeGT applies the GT predicate on the "withdraw_fee" field.
func WithdrawFeeGT(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldWithdrawFee, v))
}

// WithdrawFeeGTE applies the GTE predicate on the "withdraw_fee" field.
func WithdrawFeeGTE(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldWithdrawFee, v))
}

// WithdrawFeeLT applies the LT predicate on the "withdraw_fee" field.
func WithdrawFeeLT(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldWithdrawFee, v))
}

// WithdrawFeeLTE applies the LTE predicate on the "withdraw_fee" field.
func WithdrawFeeLTE(v float64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldWithdrawFee, v))
}

// WithdrawFeeTypeEQ applies the EQ predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldWithdrawFeeType, v))
}

// WithdrawFeeTypeNEQ applies the NEQ predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeNEQ(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldWithdrawFeeType, v))
}

// WithdrawFeeTypeIn applies the In predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldWithdrawFeeType, vs...))
}

// WithdrawFeeTypeNotIn applies the NotIn predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeNotIn(vs ...int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldWithdrawFeeType, vs...))
}

// WithdrawFeeTypeGT applies the GT predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeGT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldWithdrawFeeType, v))
}

// WithdrawFeeTypeGTE applies the GTE predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeGTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldWithdrawFeeType, v))
}

// WithdrawFeeTypeLT applies the LT predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeLT(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldWithdrawFeeType, v))
}

// WithdrawFeeTypeLTE applies the LTE predicate on the "withdraw_fee_type" field.
func WithdrawFeeTypeLTE(v int64) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldWithdrawFeeType, v))
}

// MinDepositEQ applies the EQ predicate on the "min_deposit" field.
func MinDepositEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinDeposit, v))
}

// MinDepositNEQ applies the NEQ predicate on the "min_deposit" field.
func MinDepositNEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldMinDeposit, v))
}

// MinDepositIn applies the In predicate on the "min_deposit" field.
func MinDepositIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldMinDeposit, vs...))
}

// MinDepositNotIn applies the NotIn predicate on the "min_deposit" field.
func MinDepositNotIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldMinDeposit, vs...))
}

// MinDepositGT applies the GT predicate on the "min_deposit" field.
func MinDepositGT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldMinDeposit, v))
}

// MinDepositGTE applies the GTE predicate on the "min_deposit" field.
func MinDepositGTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldMinDeposit, v))
}

// MinDepositLT applies the LT predicate on the "min_deposit" field.
func MinDepositLT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldMinDeposit, v))
}

// MinDepositLTE applies the LTE predicate on the "min_deposit" field.
func MinDepositLTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldMinDeposit, v))
}

// MinWithdrawEQ applies the EQ predicate on the "min_withdraw" field.
func MinWithdrawEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinWithdraw, v))
}

// MinWithdrawNEQ applies the NEQ predicate on the "min_withdraw" field.
func MinWithdrawNEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldMinWithdraw, v))
}

// MinWithdrawIn applies the In predicate on the "min_withdraw" field.
func MinWithdrawIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldMinWithdraw, vs...))
}

// MinWithdrawNotIn applies the NotIn predicate on the "min_withdraw" field.
func MinWithdrawNotIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldMinWithdraw, vs...))
}

// MinWithdrawGT applies the GT predicate on the "min_withdraw" field.
func MinWithdrawGT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldMinWithdraw, v))
}

// MinWithdrawGTE applies the GTE predicate on the "min_withdraw" field.
func MinWithdrawGTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldMinWithdraw, v))
}

// MinWithdrawLT applies the LT predicate on the "min_withdraw" field.
func MinWithdrawLT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldMinWithdraw, v))
}

// MinWithdrawLTE applies the LTE predicate on the "min_withdraw" field.
func MinWithdrawLTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldMinWithdraw, v))
}

// MinCollectEQ applies the EQ predicate on the "min_collect" field.
func MinCollectEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldEQ(FieldMinCollect, v))
}

// MinCollectNEQ applies the NEQ predicate on the "min_collect" field.
func MinCollectNEQ(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNEQ(FieldMinCollect, v))
}

// MinCollectIn applies the In predicate on the "min_collect" field.
func MinCollectIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIn(FieldMinCollect, vs...))
}

// MinCollectNotIn applies the NotIn predicate on the "min_collect" field.
func MinCollectNotIn(vs ...decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotIn(FieldMinCollect, vs...))
}

// MinCollectGT applies the GT predicate on the "min_collect" field.
func MinCollectGT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGT(FieldMinCollect, v))
}

// MinCollectGTE applies the GTE predicate on the "min_collect" field.
func MinCollectGTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldGTE(FieldMinCollect, v))
}

// MinCollectLT applies the LT predicate on the "min_collect" field.
func MinCollectLT(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLT(FieldMinCollect, v))
}

// MinCollectLTE applies the LTE predicate on the "min_collect" field.
func MinCollectLTE(v decimal.Decimal) predicate.Blockchain {
	return predicate.Blockchain(sql.FieldLTE(FieldMinCollect, v))
}

// GasPriceIsNil applies the IsNil predicate on the "gas_price" field.
func GasPriceIsNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldIsNull(FieldGasPrice))
}

// GasPriceNotNil applies the NotNil predicate on the "gas_price" field.
func GasPriceNotNil() predicate.Blockchain {
	return predicate.Blockchain(sql.FieldNotNull(FieldGasPrice))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Blockchain) predicate.Blockchain {
	return predicate.Blockchain(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Blockchain) predicate.Blockchain {
	return predicate.Blockchain(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blockchain) predicate.Blockchain {
	return predicate.Blockchain(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/skyisboss/pay-system/ent/predicate"
	"github.com/skyisboss/pay-system/ent/tsession"
)

// TSessionUpdate is the builder for updating TSession entities.
type TSessionUpdate struct {
	config
	hooks    []Hook
	mutation *TSessionMutation
}

// Where appends a list predicates to the TSessionUpdate builder.
func (tu *TSessionUpdate) Where(ps ...predicate.TSession) *TSessionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetKeyName sets the "key_name" field.
func (tu *TSessionUpdate) SetKeyName(s string) *TSessionUpdate {
	tu.mutation.SetKeyName(s)
	return tu
}

// SetKeyValue sets the "key_value" field.
func (tu *TSessionUpdate) SetKeyValue(s string) *TSessionUpdate {
	tu.mutation.SetKeyValue(s)
	return tu
}

// SetIP sets the "ip" field.
func (tu *TSessionUpdate) SetIP(s string) *TSessionUpdate {
	tu.mutation.SetIP(s)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TSessionUpdate) SetCreatedAt(t time.Time) *TSessionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TSessionUpdate) SetNillableCreatedAt(t *time.Time) *TSessionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TSessionUpdate) ClearCreatedAt() *TSessionUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TSessionUpdate) SetUpdatedAt(t time.Time) *TSessionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TSessionUpdate) SetNillableUpdatedAt(t *time.Time) *TSessionUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TSessionUpdate) ClearUpdatedAt() *TSessionUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// Mutation returns the TSessionMutation object of the builder.
func (tu *TSessionUpdate) Mutation() *TSessionMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TSessionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TSessionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tsession.Table, tsession.Columns, sqlgraph.NewFieldSpec(tsession.FieldID, field.TypeUint64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.KeyName(); ok {
		_spec.SetField(tsession.FieldKeyName, field.TypeString, value)
	}
	if value, ok := tu.mutation.KeyValue(); ok {
		_spec.SetField(tsession.FieldKeyValue, field.TypeString, value)
	}
	if value, ok := tu.mutation.IP(); ok {
		_spec.SetField(tsession.FieldIP, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tsession.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(tsession.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tsession.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TSessionUpdateOne is the builder for updating a single TSession entity.
type TSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TSessionMutation
}

// SetKeyName sets the "key_name" field.
func (tuo *TSessionUpdateOne) SetKeyName(s string) *TSessionUpdateOne {
	tuo.mutation.SetKeyName(s)
	return tuo
}

// SetKeyValue sets the "key_value" field.
func (tuo *TSessionUpdateOne) SetKeyValue(s string) *TSessionUpdateOne {
	tuo.mutation.SetKeyValue(s)
	return tuo
}

// SetIP sets the "ip" field.
func (tuo *TSessionUpdateOne) SetIP(s string) *TSessionUpdateOne {
	tuo.mutation.SetIP(s)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TSessionUpdateOne) SetCreatedAt(t time.Time) *TSessionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *TSessionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TSessionUpdateOne) ClearCreatedAt() *TSessionUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TSessionUpdateOne) SetUpdatedAt(t time.Time) *TSessionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TSessionUpdateOne) SetNillableUpdatedAt(t *time.Time) *TSessionUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TSessionUpdateOne) ClearUpdatedAt() *TSessionUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// Mutation returns the TSessionMutation object of the builder.
func (tuo *TSessionUpdateOne) Mutation() *TSessionMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TSessionUpdate builder.
func (tuo *TSessionUpdateOne) Where(ps ...predicate.TSession) *TSessionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TSessionUpdateOne) Select(field string, fields ...string) *TSessionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated TSession entity.
func (tuo *TSessionUpdateOne) Save(ctx context.Context) (*TSession, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TSessionUpdateOne) SaveX(ctx context.Context) *TSession {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TSessionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TSessionUpdateOne) sqlSave(ctx context.Context) (_node *TSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(tsession.Table, tsession.Columns, sqlgraph.NewFieldSpec(tsession.FieldID, field.TypeUint64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tsession.FieldID)
		for _, f := range fields {
			if !tsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.KeyName(); ok {
		_spec.SetField(tsession.FieldKeyName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.KeyValue(); ok {
		_spec.SetField(tsession.FieldKeyValue, field.TypeString, value)
	}
	if value, ok := tuo.mutation.IP(); ok {
		_spec.SetField(tsession.FieldIP, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tsession.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tsession.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tsession.FieldUpdatedAt, field.TypeTime)
	}
	_node = &TSession{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

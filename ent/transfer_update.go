// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/predicate"
	"github.com/skyisboss/pay-system/ent/transfer"
)

// TransferUpdate is the builder for updating Transfer entities.
type TransferUpdate struct {
	config
	hooks    []Hook
	mutation *TransferMutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (tu *TransferUpdate) Where(ps ...predicate.Transfer) *TransferUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransferUpdate) SetUpdatedAt(t time.Time) *TransferUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableUpdatedAt(t *time.Time) *TransferUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TransferUpdate) ClearUpdatedAt() *TransferUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TransferUpdate) SetDeletedAt(t time.Time) *TransferUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableDeletedAt(t *time.Time) *TransferUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TransferUpdate) ClearDeletedAt() *TransferUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetRelatedType sets the "related_type" field.
func (tu *TransferUpdate) SetRelatedType(i int64) *TransferUpdate {
	tu.mutation.ResetRelatedType()
	tu.mutation.SetRelatedType(i)
	return tu
}

// AddRelatedType adds i to the "related_type" field.
func (tu *TransferUpdate) AddRelatedType(i int64) *TransferUpdate {
	tu.mutation.AddRelatedType(i)
	return tu
}

// SetRelatedID sets the "related_id" field.
func (tu *TransferUpdate) SetRelatedID(u uint64) *TransferUpdate {
	tu.mutation.ResetRelatedID()
	tu.mutation.SetRelatedID(u)
	return tu
}

// AddRelatedID adds u to the "related_id" field.
func (tu *TransferUpdate) AddRelatedID(u int64) *TransferUpdate {
	tu.mutation.AddRelatedID(u)
	return tu
}

// SetChainID sets the "chain_id" field.
func (tu *TransferUpdate) SetChainID(u uint64) *TransferUpdate {
	tu.mutation.ResetChainID()
	tu.mutation.SetChainID(u)
	return tu
}

// AddChainID adds u to the "chain_id" field.
func (tu *TransferUpdate) AddChainID(u int64) *TransferUpdate {
	tu.mutation.AddChainID(u)
	return tu
}

// SetTxID sets the "tx_id" field.
func (tu *TransferUpdate) SetTxID(s string) *TransferUpdate {
	tu.mutation.SetTxID(s)
	return tu
}

// SetFromAddress sets the "from_address" field.
func (tu *TransferUpdate) SetFromAddress(s string) *TransferUpdate {
	tu.mutation.SetFromAddress(s)
	return tu
}

// SetToAddress sets the "to_address" field.
func (tu *TransferUpdate) SetToAddress(s string) *TransferUpdate {
	tu.mutation.SetToAddress(s)
	return tu
}

// SetAmountStr sets the "amount_str" field.
func (tu *TransferUpdate) SetAmountStr(s string) *TransferUpdate {
	tu.mutation.SetAmountStr(s)
	return tu
}

// SetAmountRaw sets the "amount_raw" field.
func (tu *TransferUpdate) SetAmountRaw(d decimal.Decimal) *TransferUpdate {
	tu.mutation.ResetAmountRaw()
	tu.mutation.SetAmountRaw(d)
	return tu
}

// AddAmountRaw adds d to the "amount_raw" field.
func (tu *TransferUpdate) AddAmountRaw(d decimal.Decimal) *TransferUpdate {
	tu.mutation.AddAmountRaw(d)
	return tu
}

// SetHandleStatus sets the "handle_status" field.
func (tu *TransferUpdate) SetHandleStatus(i int64) *TransferUpdate {
	tu.mutation.ResetHandleStatus()
	tu.mutation.SetHandleStatus(i)
	return tu
}

// SetNillableHandleStatus sets the "handle_status" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableHandleStatus(i *int64) *TransferUpdate {
	if i != nil {
		tu.SetHandleStatus(*i)
	}
	return tu
}

// AddHandleStatus adds i to the "handle_status" field.
func (tu *TransferUpdate) AddHandleStatus(i int64) *TransferUpdate {
	tu.mutation.AddHandleStatus(i)
	return tu
}

// SetHandleMsg sets the "handle_msg" field.
func (tu *TransferUpdate) SetHandleMsg(s string) *TransferUpdate {
	tu.mutation.SetHandleMsg(s)
	return tu
}

// SetNillableHandleMsg sets the "handle_msg" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableHandleMsg(s *string) *TransferUpdate {
	if s != nil {
		tu.SetHandleMsg(*s)
	}
	return tu
}

// SetHandleTime sets the "handle_time" field.
func (tu *TransferUpdate) SetHandleTime(t time.Time) *TransferUpdate {
	tu.mutation.SetHandleTime(t)
	return tu
}

// SetNillableHandleTime sets the "handle_time" field if the given value is not nil.
func (tu *TransferUpdate) SetNillableHandleTime(t *time.Time) *TransferUpdate {
	if t != nil {
		tu.SetHandleTime(*t)
	}
	return tu
}

// ClearHandleTime clears the value of the "handle_time" field.
func (tu *TransferUpdate) ClearHandleTime() *TransferUpdate {
	tu.mutation.ClearHandleTime()
	return tu
}

// SetGas sets the "gas" field.
func (tu *TransferUpdate) SetGas(i int64) *TransferUpdate {
	tu.mutation.ResetGas()
	tu.mutation.SetGas(i)
	return tu
}

// AddGas adds i to the "gas" field.
func (tu *TransferUpdate) AddGas(i int64) *TransferUpdate {
	tu.mutation.AddGas(i)
	return tu
}

// SetGasPrice sets the "gas_price" field.
func (tu *TransferUpdate) SetGasPrice(i int64) *TransferUpdate {
	tu.mutation.ResetGasPrice()
	tu.mutation.SetGasPrice(i)
	return tu
}

// AddGasPrice adds i to the "gas_price" field.
func (tu *TransferUpdate) AddGasPrice(i int64) *TransferUpdate {
	tu.mutation.AddGasPrice(i)
	return tu
}

// SetNonce sets the "nonce" field.
func (tu *TransferUpdate) SetNonce(i int64) *TransferUpdate {
	tu.mutation.ResetNonce()
	tu.mutation.SetNonce(i)
	return tu
}

// AddNonce adds i to the "nonce" field.
func (tu *TransferUpdate) AddNonce(i int64) *TransferUpdate {
	tu.mutation.AddNonce(i)
	return tu
}

// SetHex sets the "hex" field.
func (tu *TransferUpdate) SetHex(s string) *TransferUpdate {
	tu.mutation.SetHex(s)
	return tu
}

// Mutation returns the TransferMutation object of the builder.
func (tu *TransferUpdate) Mutation() *TransferMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransferUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransferUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransferUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUint64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(transfer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(transfer.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(transfer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.RelatedType(); ok {
		_spec.SetField(transfer.FieldRelatedType, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedRelatedType(); ok {
		_spec.AddField(transfer.FieldRelatedType, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.RelatedID(); ok {
		_spec.SetField(transfer.FieldRelatedID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedRelatedID(); ok {
		_spec.AddField(transfer.FieldRelatedID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.ChainID(); ok {
		_spec.SetField(transfer.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedChainID(); ok {
		_spec.AddField(transfer.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.TxID(); ok {
		_spec.SetField(transfer.FieldTxID, field.TypeString, value)
	}
	if value, ok := tu.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.AmountStr(); ok {
		_spec.SetField(transfer.FieldAmountStr, field.TypeString, value)
	}
	if value, ok := tu.mutation.AmountRaw(); ok {
		_spec.SetField(transfer.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmountRaw(); ok {
		_spec.AddField(transfer.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.HandleStatus(); ok {
		_spec.SetField(transfer.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedHandleStatus(); ok {
		_spec.AddField(transfer.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.HandleMsg(); ok {
		_spec.SetField(transfer.FieldHandleMsg, field.TypeString, value)
	}
	if value, ok := tu.mutation.HandleTime(); ok {
		_spec.SetField(transfer.FieldHandleTime, field.TypeTime, value)
	}
	if tu.mutation.HandleTimeCleared() {
		_spec.ClearField(transfer.FieldHandleTime, field.TypeTime)
	}
	if value, ok := tu.mutation.Gas(); ok {
		_spec.SetField(transfer.FieldGas, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedGas(); ok {
		_spec.AddField(transfer.FieldGas, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.GasPrice(); ok {
		_spec.SetField(transfer.FieldGasPrice, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedGasPrice(); ok {
		_spec.AddField(transfer.FieldGasPrice, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Nonce(); ok {
		_spec.SetField(transfer.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedNonce(); ok {
		_spec.AddField(transfer.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Hex(); ok {
		_spec.SetField(transfer.FieldHex, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransferUpdateOne is the builder for updating a single Transfer entity.
type TransferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransferMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransferUpdateOne) SetUpdatedAt(t time.Time) *TransferUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableUpdatedAt(t *time.Time) *TransferUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TransferUpdateOne) ClearUpdatedAt() *TransferUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TransferUpdateOne) SetDeletedAt(t time.Time) *TransferUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableDeletedAt(t *time.Time) *TransferUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TransferUpdateOne) ClearDeletedAt() *TransferUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetRelatedType sets the "related_type" field.
func (tuo *TransferUpdateOne) SetRelatedType(i int64) *TransferUpdateOne {
	tuo.mutation.ResetRelatedType()
	tuo.mutation.SetRelatedType(i)
	return tuo
}

// AddRelatedType adds i to the "related_type" field.
func (tuo *TransferUpdateOne) AddRelatedType(i int64) *TransferUpdateOne {
	tuo.mutation.AddRelatedType(i)
	return tuo
}

// SetRelatedID sets the "related_id" field.
func (tuo *TransferUpdateOne) SetRelatedID(u uint64) *TransferUpdateOne {
	tuo.mutation.ResetRelatedID()
	tuo.mutation.SetRelatedID(u)
	return tuo
}

// AddRelatedID adds u to the "related_id" field.
func (tuo *TransferUpdateOne) AddRelatedID(u int64) *TransferUpdateOne {
	tuo.mutation.AddRelatedID(u)
	return tuo
}

// SetChainID sets the "chain_id" field.
func (tuo *TransferUpdateOne) SetChainID(u uint64) *TransferUpdateOne {
	tuo.mutation.ResetChainID()
	tuo.mutation.SetChainID(u)
	return tuo
}

// AddChainID adds u to the "chain_id" field.
func (tuo *TransferUpdateOne) AddChainID(u int64) *TransferUpdateOne {
	tuo.mutation.AddChainID(u)
	return tuo
}

// SetTxID sets the "tx_id" field.
func (tuo *TransferUpdateOne) SetTxID(s string) *TransferUpdateOne {
	tuo.mutation.SetTxID(s)
	return tuo
}

// SetFromAddress sets the "from_address" field.
func (tuo *TransferUpdateOne) SetFromAddress(s string) *TransferUpdateOne {
	tuo.mutation.SetFromAddress(s)
	return tuo
}

// SetToAddress sets the "to_address" field.
func (tuo *TransferUpdateOne) SetToAddress(s string) *TransferUpdateOne {
	tuo.mutation.SetToAddress(s)
	return tuo
}

// SetAmountStr sets the "amount_str" field.
func (tuo *TransferUpdateOne) SetAmountStr(s string) *TransferUpdateOne {
	tuo.mutation.SetAmountStr(s)
	return tuo
}

// SetAmountRaw sets the "amount_raw" field.
func (tuo *TransferUpdateOne) SetAmountRaw(d decimal.Decimal) *TransferUpdateOne {
	tuo.mutation.ResetAmountRaw()
	tuo.mutation.SetAmountRaw(d)
	return tuo
}

// AddAmountRaw adds d to the "amount_raw" field.
func (tuo *TransferUpdateOne) AddAmountRaw(d decimal.Decimal) *TransferUpdateOne {
	tuo.mutation.AddAmountRaw(d)
	return tuo
}

// SetHandleStatus sets the "handle_status" field.
func (tuo *TransferUpdateOne) SetHandleStatus(i int64) *TransferUpdateOne {
	tuo.mutation.ResetHandleStatus()
	tuo.mutation.SetHandleStatus(i)
	return tuo
}

// SetNillableHandleStatus sets the "handle_status" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableHandleStatus(i *int64) *TransferUpdateOne {
	if i != nil {
		tuo.SetHandleStatus(*i)
	}
	return tuo
}

// AddHandleStatus adds i to the "handle_status" field.
func (tuo *TransferUpdateOne) AddHandleStatus(i int64) *TransferUpdateOne {
	tuo.mutation.AddHandleStatus(i)
	return tuo
}

// SetHandleMsg sets the "handle_msg" field.
func (tuo *TransferUpdateOne) SetHandleMsg(s string) *TransferUpdateOne {
	tuo.mutation.SetHandleMsg(s)
	return tuo
}

// SetNillableHandleMsg sets the "handle_msg" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableHandleMsg(s *string) *TransferUpdateOne {
	if s != nil {
		tuo.SetHandleMsg(*s)
	}
	return tuo
}

// SetHandleTime sets the "handle_time" field.
func (tuo *TransferUpdateOne) SetHandleTime(t time.Time) *TransferUpdateOne {
	tuo.mutation.SetHandleTime(t)
	return tuo
}

// SetNillableHandleTime sets the "handle_time" field if the given value is not nil.
func (tuo *TransferUpdateOne) SetNillableHandleTime(t *time.Time) *TransferUpdateOne {
	if t != nil {
		tuo.SetHandleTime(*t)
	}
	return tuo
}

// ClearHandleTime clears the value of the "handle_time" field.
func (tuo *TransferUpdateOne) ClearHandleTime() *TransferUpdateOne {
	tuo.mutation.ClearHandleTime()
	return tuo
}

// SetGas sets the "gas" field.
func (tuo *TransferUpdateOne) SetGas(i int64) *TransferUpdateOne {
	tuo.mutation.ResetGas()
	tuo.mutation.SetGas(i)
	return tuo
}

// AddGas adds i to the "gas" field.
func (tuo *TransferUpdateOne) AddGas(i int64) *TransferUpdateOne {
	tuo.mutation.AddGas(i)
	return tuo
}

// SetGasPrice sets the "gas_price" field.
func (tuo *TransferUpdateOne) SetGasPrice(i int64) *TransferUpdateOne {
	tuo.mutation.ResetGasPrice()
	tuo.mutation.SetGasPrice(i)
	return tuo
}

// AddGasPrice adds i to the "gas_price" field.
func (tuo *TransferUpdateOne) AddGasPrice(i int64) *TransferUpdateOne {
	tuo.mutation.AddGasPrice(i)
	return tuo
}

// SetNonce sets the "nonce" field.
func (tuo *TransferUpdateOne) SetNonce(i int64) *TransferUpdateOne {
	tuo.mutation.ResetNonce()
	tuo.mutation.SetNonce(i)
	return tuo
}

// AddNonce adds i to the "nonce" field.
func (tuo *TransferUpdateOne) AddNonce(i int64) *TransferUpdateOne {
	tuo.mutation.AddNonce(i)
	return tuo
}

// SetHex sets the "hex" field.
func (tuo *TransferUpdateOne) SetHex(s string) *TransferUpdateOne {
	tuo.mutation.SetHex(s)
	return tuo
}

// Mutation returns the TransferMutation object of the builder.
func (tuo *TransferUpdateOne) Mutation() *TransferMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TransferUpdate builder.
func (tuo *TransferUpdateOne) Where(ps ...predicate.Transfer) *TransferUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransferUpdateOne) Select(field string, fields ...string) *TransferUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transfer entity.
func (tuo *TransferUpdateOne) Save(ctx context.Context) (*Transfer, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransferUpdateOne) SaveX(ctx context.Context) *Transfer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransferUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransferUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransferUpdateOne) sqlSave(ctx context.Context) (_node *Transfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(transfer.Table, transfer.Columns, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUint64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transfer.FieldID)
		for _, f := range fields {
			if !transfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(transfer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(transfer.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(transfer.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.RelatedType(); ok {
		_spec.SetField(transfer.FieldRelatedType, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedRelatedType(); ok {
		_spec.AddField(transfer.FieldRelatedType, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.RelatedID(); ok {
		_spec.SetField(transfer.FieldRelatedID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedRelatedID(); ok {
		_spec.AddField(transfer.FieldRelatedID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.ChainID(); ok {
		_spec.SetField(transfer.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedChainID(); ok {
		_spec.AddField(transfer.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.TxID(); ok {
		_spec.SetField(transfer.FieldTxID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AmountStr(); ok {
		_spec.SetField(transfer.FieldAmountStr, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AmountRaw(); ok {
		_spec.SetField(transfer.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmountRaw(); ok {
		_spec.AddField(transfer.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.HandleStatus(); ok {
		_spec.SetField(transfer.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedHandleStatus(); ok {
		_spec.AddField(transfer.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.HandleMsg(); ok {
		_spec.SetField(transfer.FieldHandleMsg, field.TypeString, value)
	}
	if value, ok := tuo.mutation.HandleTime(); ok {
		_spec.SetField(transfer.FieldHandleTime, field.TypeTime, value)
	}
	if tuo.mutation.HandleTimeCleared() {
		_spec.ClearField(transfer.FieldHandleTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.Gas(); ok {
		_spec.SetField(transfer.FieldGas, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedGas(); ok {
		_spec.AddField(transfer.FieldGas, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.GasPrice(); ok {
		_spec.SetField(transfer.FieldGasPrice, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedGasPrice(); ok {
		_spec.AddField(transfer.FieldGasPrice, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Nonce(); ok {
		_spec.SetField(transfer.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedNonce(); ok {
		_spec.AddField(transfer.FieldNonce, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Hex(); ok {
		_spec.SetField(transfer.FieldHex, field.TypeString, value)
	}
	_node = &Transfer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

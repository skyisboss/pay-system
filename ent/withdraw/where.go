// Code generated by ent, DO NOT EDIT.

package withdraw

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldDeletedAt, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldProductID, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldChainID, v))
}

// ToAddress applies equality check predicate on the "to_address" field. It's identical to ToAddressEQ.
func ToAddress(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldToAddress, v))
}

// AmountStr applies equality check predicate on the "amount_str" field. It's identical to AmountStrEQ.
func AmountStr(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldAmountStr, v))
}

// AmountRaw applies equality check predicate on the "amount_raw" field. It's identical to AmountRawEQ.
func AmountRaw(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldAmountRaw, v))
}

// SerialID applies equality check predicate on the "serial_id" field. It's identical to SerialIDEQ.
func SerialID(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldSerialID, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldTxHash, v))
}

// HandleStatus applies equality check predicate on the "handle_status" field. It's identical to HandleStatusEQ.
func HandleStatus(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleStatus, v))
}

// HandleMsg applies equality check predicate on the "handle_msg" field. It's identical to HandleMsgEQ.
func HandleMsg(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleMsg, v))
}

// HandleTime applies equality check predicate on the "handle_time" field. It's identical to HandleTimeEQ.
func HandleTime(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotNull(FieldDeletedAt))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldProductID, v))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v uint64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldChainID, v))
}

// ToAddressEQ applies the EQ predicate on the "to_address" field.
func ToAddressEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldToAddress, v))
}

// ToAddressNEQ applies the NEQ predicate on the "to_address" field.
func ToAddressNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldToAddress, v))
}

// ToAddressIn applies the In predicate on the "to_address" field.
func ToAddressIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldToAddress, vs...))
}

// ToAddressNotIn applies the NotIn predicate on the "to_address" field.
func ToAddressNotIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldToAddress, vs...))
}

// ToAddressGT applies the GT predicate on the "to_address" field.
func ToAddressGT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldToAddress, v))
}

// ToAddressGTE applies the GTE predicate on the "to_address" field.
func ToAddressGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldToAddress, v))
}

// ToAddressLT applies the LT predicate on the "to_address" field.
func ToAddressLT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldToAddress, v))
}

// ToAddressLTE applies the LTE predicate on the "to_address" field.
func ToAddressLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldToAddress, v))
}

// ToAddressContains applies the Contains predicate on the "to_address" field.
func ToAddressContains(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContains(FieldToAddress, v))
}

// ToAddressHasPrefix applies the HasPrefix predicate on the "to_address" field.
func ToAddressHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasPrefix(FieldToAddress, v))
}

// ToAddressHasSuffix applies the HasSuffix predicate on the "to_address" field.
func ToAddressHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasSuffix(FieldToAddress, v))
}

// ToAddressEqualFold applies the EqualFold predicate on the "to_address" field.
func ToAddressEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEqualFold(FieldToAddress, v))
}

// ToAddressContainsFold applies the ContainsFold predicate on the "to_address" field.
func ToAddressContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContainsFold(FieldToAddress, v))
}

// AmountStrEQ applies the EQ predicate on the "amount_str" field.
func AmountStrEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldAmountStr, v))
}

// AmountStrNEQ applies the NEQ predicate on the "amount_str" field.
func AmountStrNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldAmountStr, v))
}

// AmountStrIn applies the In predicate on the "amount_str" field.
func AmountStrIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldAmountStr, vs...))
}

// AmountStrNotIn applies the NotIn predicate on the "amount_str" field.
func AmountStrNotIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldAmountStr, vs...))
}

// AmountStrGT applies the GT predicate on the "amount_str" field.
func AmountStrGT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldAmountStr, v))
}

// AmountStrGTE applies the GTE predicate on the "amount_str" field.
func AmountStrGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldAmountStr, v))
}

// AmountStrLT applies the LT predicate on the "amount_str" field.
func AmountStrLT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldAmountStr, v))
}

// AmountStrLTE applies the LTE predicate on the "amount_str" field.
func AmountStrLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldAmountStr, v))
}

// AmountStrContains applies the Contains predicate on the "amount_str" field.
func AmountStrContains(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContains(FieldAmountStr, v))
}

// AmountStrHasPrefix applies the HasPrefix predicate on the "amount_str" field.
func AmountStrHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasPrefix(FieldAmountStr, v))
}

// AmountStrHasSuffix applies the HasSuffix predicate on the "amount_str" field.
func AmountStrHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasSuffix(FieldAmountStr, v))
}

// AmountStrEqualFold applies the EqualFold predicate on the "amount_str" field.
func AmountStrEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEqualFold(FieldAmountStr, v))
}

// AmountStrContainsFold applies the ContainsFold predicate on the "amount_str" field.
func AmountStrContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContainsFold(FieldAmountStr, v))
}

// AmountRawEQ applies the EQ predicate on the "amount_raw" field.
func AmountRawEQ(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldAmountRaw, v))
}

// AmountRawNEQ applies the NEQ predicate on the "amount_raw" field.
func AmountRawNEQ(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldAmountRaw, v))
}

// AmountRawIn applies the In predicate on the "amount_raw" field.
func AmountRawIn(vs ...decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldAmountRaw, vs...))
}

// AmountRawNotIn applies the NotIn predicate on the "amount_raw" field.
func AmountRawNotIn(vs ...decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldAmountRaw, vs...))
}

// AmountRawGT applies the GT predicate on the "amount_raw" field.
func AmountRawGT(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldAmountRaw, v))
}

// AmountRawGTE applies the GTE predicate on the "amount_raw" field.
func AmountRawGTE(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldAmountRaw, v))
}

// AmountRawLT applies the LT predicate on the "amount_raw" field.
func AmountRawLT(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldAmountRaw, v))
}

// AmountRawLTE applies the LTE predicate on the "amount_raw" field.
func AmountRawLTE(v decimal.Decimal) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldAmountRaw, v))
}

// SerialIDEQ applies the EQ predicate on the "serial_id" field.
func SerialIDEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldSerialID, v))
}

// SerialIDNEQ applies the NEQ predicate on the "serial_id" field.
func SerialIDNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldSerialID, v))
}

// SerialIDIn applies the In predicate on the "serial_id" field.
func SerialIDIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldSerialID, vs...))
}

// SerialIDNotIn applies the NotIn predicate on the "serial_id" field.
func SerialIDNotIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldSerialID, vs...))
}

// SerialIDGT applies the GT predicate on the "serial_id" field.
func SerialIDGT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldSerialID, v))
}

// SerialIDGTE applies the GTE predicate on the "serial_id" field.
func SerialIDGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldSerialID, v))
}

// SerialIDLT applies the LT predicate on the "serial_id" field.
func SerialIDLT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldSerialID, v))
}

// SerialIDLTE applies the LTE predicate on the "serial_id" field.
func SerialIDLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldSerialID, v))
}

// SerialIDContains applies the Contains predicate on the "serial_id" field.
func SerialIDContains(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContains(FieldSerialID, v))
}

// SerialIDHasPrefix applies the HasPrefix predicate on the "serial_id" field.
func SerialIDHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasPrefix(FieldSerialID, v))
}

// SerialIDHasSuffix applies the HasSuffix predicate on the "serial_id" field.
func SerialIDHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasSuffix(FieldSerialID, v))
}

// SerialIDEqualFold applies the EqualFold predicate on the "serial_id" field.
func SerialIDEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEqualFold(FieldSerialID, v))
}

// SerialIDContainsFold applies the ContainsFold predicate on the "serial_id" field.
func SerialIDContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContainsFold(FieldSerialID, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIsNull(FieldTxHash))
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotNull(FieldTxHash))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContainsFold(FieldTxHash, v))
}

// HandleStatusEQ applies the EQ predicate on the "handle_status" field.
func HandleStatusEQ(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleStatus, v))
}

// HandleStatusNEQ applies the NEQ predicate on the "handle_status" field.
func HandleStatusNEQ(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldHandleStatus, v))
}

// HandleStatusIn applies the In predicate on the "handle_status" field.
func HandleStatusIn(vs ...int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldHandleStatus, vs...))
}

// HandleStatusNotIn applies the NotIn predicate on the "handle_status" field.
func HandleStatusNotIn(vs ...int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldHandleStatus, vs...))
}

// HandleStatusGT applies the GT predicate on the "handle_status" field.
func HandleStatusGT(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldHandleStatus, v))
}

// HandleStatusGTE applies the GTE predicate on the "handle_status" field.
func HandleStatusGTE(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldHandleStatus, v))
}

// HandleStatusLT applies the LT predicate on the "handle_status" field.
func HandleStatusLT(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldHandleStatus, v))
}

// HandleStatusLTE applies the LTE predicate on the "handle_status" field.
func HandleStatusLTE(v int64) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldHandleStatus, v))
}

// HandleMsgEQ applies the EQ predicate on the "handle_msg" field.
func HandleMsgEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleMsg, v))
}

// HandleMsgNEQ applies the NEQ predicate on the "handle_msg" field.
func HandleMsgNEQ(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldHandleMsg, v))
}

// HandleMsgIn applies the In predicate on the "handle_msg" field.
func HandleMsgIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldHandleMsg, vs...))
}

// HandleMsgNotIn applies the NotIn predicate on the "handle_msg" field.
func HandleMsgNotIn(vs ...string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldHandleMsg, vs...))
}

// HandleMsgGT applies the GT predicate on the "handle_msg" field.
func HandleMsgGT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldHandleMsg, v))
}

// HandleMsgGTE applies the GTE predicate on the "handle_msg" field.
func HandleMsgGTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldHandleMsg, v))
}

// HandleMsgLT applies the LT predicate on the "handle_msg" field.
func HandleMsgLT(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldHandleMsg, v))
}

// HandleMsgLTE applies the LTE predicate on the "handle_msg" field.
func HandleMsgLTE(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldHandleMsg, v))
}

// HandleMsgContains applies the Contains predicate on the "handle_msg" field.
func HandleMsgContains(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContains(FieldHandleMsg, v))
}

// HandleMsgHasPrefix applies the HasPrefix predicate on the "handle_msg" field.
func HandleMsgHasPrefix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasPrefix(FieldHandleMsg, v))
}

// HandleMsgHasSuffix applies the HasSuffix predicate on the "handle_msg" field.
func HandleMsgHasSuffix(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldHasSuffix(FieldHandleMsg, v))
}

// HandleMsgIsNil applies the IsNil predicate on the "handle_msg" field.
func HandleMsgIsNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIsNull(FieldHandleMsg))
}

// HandleMsgNotNil applies the NotNil predicate on the "handle_msg" field.
func HandleMsgNotNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotNull(FieldHandleMsg))
}

// HandleMsgEqualFold applies the EqualFold predicate on the "handle_msg" field.
func HandleMsgEqualFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEqualFold(FieldHandleMsg, v))
}

// HandleMsgContainsFold applies the ContainsFold predicate on the "handle_msg" field.
func HandleMsgContainsFold(v string) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldContainsFold(FieldHandleMsg, v))
}

// HandleTimeEQ applies the EQ predicate on the "handle_time" field.
func HandleTimeEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldEQ(FieldHandleTime, v))
}

// HandleTimeNEQ applies the NEQ predicate on the "handle_time" field.
func HandleTimeNEQ(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNEQ(FieldHandleTime, v))
}

// HandleTimeIn applies the In predicate on the "handle_time" field.
func HandleTimeIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIn(FieldHandleTime, vs...))
}

// HandleTimeNotIn applies the NotIn predicate on the "handle_time" field.
func HandleTimeNotIn(vs ...time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotIn(FieldHandleTime, vs...))
}

// HandleTimeGT applies the GT predicate on the "handle_time" field.
func HandleTimeGT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGT(FieldHandleTime, v))
}

// HandleTimeGTE applies the GTE predicate on the "handle_time" field.
func HandleTimeGTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldGTE(FieldHandleTime, v))
}

// HandleTimeLT applies the LT predicate on the "handle_time" field.
func HandleTimeLT(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLT(FieldHandleTime, v))
}

// HandleTimeLTE applies the LTE predicate on the "handle_time" field.
func HandleTimeLTE(v time.Time) predicate.Withdraw {
	return predicate.Withdraw(sql.FieldLTE(FieldHandleTime, v))
}

// HandleTimeIsNil applies the IsNil predicate on the "handle_time" field.
func HandleTimeIsNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldIsNull(FieldHandleTime))
}

// HandleTimeNotNil applies the NotNil predicate on the "handle_time" field.
func HandleTimeNotNil() predicate.Withdraw {
	return predicate.Withdraw(sql.FieldNotNull(FieldHandleTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Withdraw) predicate.Withdraw {
	return predicate.Withdraw(sql.NotPredicates(p))
}

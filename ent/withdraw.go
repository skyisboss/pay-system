// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/withdraw"
)

// Withdraw is the model entity for the Withdraw schema.
type Withdraw struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int64 `json:"product_id,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID uint64 `json:"chain_id,omitempty"`
	// ToAddress holds the value of the "to_address" field.
	ToAddress string `json:"to_address,omitempty"`
	// AmountStr holds the value of the "amount_str" field.
	AmountStr string `json:"amount_str,omitempty"`
	// wei单位无小数点
	AmountRaw decimal.Decimal `json:"amount_raw,omitempty"`
	// SerialID holds the value of the "serial_id" field.
	SerialID string `json:"serial_id,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// HandleStatus holds the value of the "handle_status" field.
	HandleStatus int64 `json:"handle_status,omitempty"`
	// HandleMsg holds the value of the "handle_msg" field.
	HandleMsg string `json:"handle_msg,omitempty"`
	// HandleTime holds the value of the "handle_time" field.
	HandleTime   time.Time `json:"handle_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Withdraw) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case withdraw.FieldAmountRaw:
			values[i] = new(decimal.Decimal)
		case withdraw.FieldID, withdraw.FieldProductID, withdraw.FieldChainID, withdraw.FieldHandleStatus:
			values[i] = new(sql.NullInt64)
		case withdraw.FieldToAddress, withdraw.FieldAmountStr, withdraw.FieldSerialID, withdraw.FieldTxHash, withdraw.FieldHandleMsg:
			values[i] = new(sql.NullString)
		case withdraw.FieldCreatedAt, withdraw.FieldUpdatedAt, withdraw.FieldDeletedAt, withdraw.FieldHandleTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Withdraw fields.
func (w *Withdraw) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case withdraw.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = uint64(value.Int64)
		case withdraw.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case withdraw.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case withdraw.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = value.Time
			}
		case withdraw.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				w.ProductID = value.Int64
			}
		case withdraw.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				w.ChainID = uint64(value.Int64)
			}
		case withdraw.FieldToAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_address", values[i])
			} else if value.Valid {
				w.ToAddress = value.String
			}
		case withdraw.FieldAmountStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount_str", values[i])
			} else if value.Valid {
				w.AmountStr = value.String
			}
		case withdraw.FieldAmountRaw:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_raw", values[i])
			} else if value != nil {
				w.AmountRaw = *value
			}
		case withdraw.FieldSerialID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_id", values[i])
			} else if value.Valid {
				w.SerialID = value.String
			}
		case withdraw.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				w.TxHash = value.String
			}
		case withdraw.FieldHandleStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field handle_status", values[i])
			} else if value.Valid {
				w.HandleStatus = value.Int64
			}
		case withdraw.FieldHandleMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle_msg", values[i])
			} else if value.Valid {
				w.HandleMsg = value.String
			}
		case withdraw.FieldHandleTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field handle_time", values[i])
			} else if value.Valid {
				w.HandleTime = value.Time
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Withdraw.
// This includes values selected through modifiers, order, etc.
func (w *Withdraw) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// Update returns a builder for updating this Withdraw.
// Note that you need to call Withdraw.Unwrap() before calling this method if this Withdraw
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Withdraw) Update() *WithdrawUpdateOne {
	return NewWithdrawClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Withdraw entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Withdraw) Unwrap() *Withdraw {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Withdraw is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Withdraw) String() string {
	var builder strings.Builder
	builder.WriteString("Withdraw(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(w.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", w.ProductID))
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", w.ChainID))
	builder.WriteString(", ")
	builder.WriteString("to_address=")
	builder.WriteString(w.ToAddress)
	builder.WriteString(", ")
	builder.WriteString("amount_str=")
	builder.WriteString(w.AmountStr)
	builder.WriteString(", ")
	builder.WriteString("amount_raw=")
	builder.WriteString(fmt.Sprintf("%v", w.AmountRaw))
	builder.WriteString(", ")
	builder.WriteString("serial_id=")
	builder.WriteString(w.SerialID)
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(w.TxHash)
	builder.WriteString(", ")
	builder.WriteString("handle_status=")
	builder.WriteString(fmt.Sprintf("%v", w.HandleStatus))
	builder.WriteString(", ")
	builder.WriteString("handle_msg=")
	builder.WriteString(w.HandleMsg)
	builder.WriteString(", ")
	builder.WriteString("handle_time=")
	builder.WriteString(w.HandleTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Withdraws is a parsable slice of Withdraw.
type Withdraws []*Withdraw

// Code generated by ent, DO NOT EDIT.

package apprun

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldUpdatedAt, v))
}

// Handler applies equality check predicate on the "handler" field. It's identical to HandlerEQ.
func Handler(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldHandler, v))
}

// Runing applies equality check predicate on the "runing" field. It's identical to RuningEQ.
func Runing(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldRuning, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldTotal, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Apprun {
	return predicate.Apprun(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Apprun {
	return predicate.Apprun(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Apprun {
	return predicate.Apprun(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Apprun {
	return predicate.Apprun(sql.FieldNotNull(FieldUpdatedAt))
}

// HandlerEQ applies the EQ predicate on the "handler" field.
func HandlerEQ(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldHandler, v))
}

// HandlerNEQ applies the NEQ predicate on the "handler" field.
func HandlerNEQ(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldHandler, v))
}

// HandlerIn applies the In predicate on the "handler" field.
func HandlerIn(vs ...string) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldHandler, vs...))
}

// HandlerNotIn applies the NotIn predicate on the "handler" field.
func HandlerNotIn(vs ...string) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldHandler, vs...))
}

// HandlerGT applies the GT predicate on the "handler" field.
func HandlerGT(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldHandler, v))
}

// HandlerGTE applies the GTE predicate on the "handler" field.
func HandlerGTE(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldHandler, v))
}

// HandlerLT applies the LT predicate on the "handler" field.
func HandlerLT(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldHandler, v))
}

// HandlerLTE applies the LTE predicate on the "handler" field.
func HandlerLTE(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldHandler, v))
}

// HandlerContains applies the Contains predicate on the "handler" field.
func HandlerContains(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldContains(FieldHandler, v))
}

// HandlerHasPrefix applies the HasPrefix predicate on the "handler" field.
func HandlerHasPrefix(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldHasPrefix(FieldHandler, v))
}

// HandlerHasSuffix applies the HasSuffix predicate on the "handler" field.
func HandlerHasSuffix(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldHasSuffix(FieldHandler, v))
}

// HandlerEqualFold applies the EqualFold predicate on the "handler" field.
func HandlerEqualFold(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldEqualFold(FieldHandler, v))
}

// HandlerContainsFold applies the ContainsFold predicate on the "handler" field.
func HandlerContainsFold(v string) predicate.Apprun {
	return predicate.Apprun(sql.FieldContainsFold(FieldHandler, v))
}

// RuningEQ applies the EQ predicate on the "runing" field.
func RuningEQ(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldRuning, v))
}

// RuningNEQ applies the NEQ predicate on the "runing" field.
func RuningNEQ(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldRuning, v))
}

// RuningIn applies the In predicate on the "runing" field.
func RuningIn(vs ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldRuning, vs...))
}

// RuningNotIn applies the NotIn predicate on the "runing" field.
func RuningNotIn(vs ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldRuning, vs...))
}

// RuningGT applies the GT predicate on the "runing" field.
func RuningGT(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldRuning, v))
}

// RuningGTE applies the GTE predicate on the "runing" field.
func RuningGTE(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldRuning, v))
}

// RuningLT applies the LT predicate on the "runing" field.
func RuningLT(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldRuning, v))
}

// RuningLTE applies the LTE predicate on the "runing" field.
func RuningLTE(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldRuning, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v uint64) predicate.Apprun {
	return predicate.Apprun(sql.FieldLTE(FieldTotal, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Apprun) predicate.Apprun {
	return predicate.Apprun(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Apprun) predicate.Apprun {
	return predicate.Apprun(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Apprun) predicate.Apprun {
	return predicate.Apprun(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package transfer

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the transfer type in the database.
	Label = "transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldRelatedType holds the string denoting the related_type field in the database.
	FieldRelatedType = "related_type"
	// FieldRelatedID holds the string denoting the related_id field in the database.
	FieldRelatedID = "related_id"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldTxID holds the string denoting the tx_id field in the database.
	FieldTxID = "tx_id"
	// FieldFromAddress holds the string denoting the from_address field in the database.
	FieldFromAddress = "from_address"
	// FieldToAddress holds the string denoting the to_address field in the database.
	FieldToAddress = "to_address"
	// FieldAmountStr holds the string denoting the amount_str field in the database.
	FieldAmountStr = "amount_str"
	// FieldAmountRaw holds the string denoting the amount_raw field in the database.
	FieldAmountRaw = "amount_raw"
	// FieldHandleStatus holds the string denoting the handle_status field in the database.
	FieldHandleStatus = "handle_status"
	// FieldHandleMsg holds the string denoting the handle_msg field in the database.
	FieldHandleMsg = "handle_msg"
	// FieldHandleTime holds the string denoting the handle_time field in the database.
	FieldHandleTime = "handle_time"
	// FieldGas holds the string denoting the gas field in the database.
	FieldGas = "gas"
	// FieldGasPrice holds the string denoting the gas_price field in the database.
	FieldGasPrice = "gas_price"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldHex holds the string denoting the hex field in the database.
	FieldHex = "hex"
	// Table holds the table name of the transfer in the database.
	Table = "transfer"
)

// Columns holds all SQL columns for transfer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldRelatedType,
	FieldRelatedID,
	FieldChainID,
	FieldTxID,
	FieldFromAddress,
	FieldToAddress,
	FieldAmountStr,
	FieldAmountRaw,
	FieldHandleStatus,
	FieldHandleMsg,
	FieldHandleTime,
	FieldGas,
	FieldGasPrice,
	FieldNonce,
	FieldHex,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultHandleStatus holds the default value on creation for the "handle_status" field.
	DefaultHandleStatus int64
	// DefaultHandleMsg holds the default value on creation for the "handle_msg" field.
	DefaultHandleMsg string
)

// OrderOption defines the ordering options for the Transfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRelatedType orders the results by the related_type field.
func ByRelatedType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelatedType, opts...).ToFunc()
}

// ByRelatedID orders the results by the related_id field.
func ByRelatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelatedID, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByTxID orders the results by the tx_id field.
func ByTxID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxID, opts...).ToFunc()
}

// ByFromAddress orders the results by the from_address field.
func ByFromAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromAddress, opts...).ToFunc()
}

// ByToAddress orders the results by the to_address field.
func ByToAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToAddress, opts...).ToFunc()
}

// ByAmountStr orders the results by the amount_str field.
func ByAmountStr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountStr, opts...).ToFunc()
}

// ByAmountRaw orders the results by the amount_raw field.
func ByAmountRaw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountRaw, opts...).ToFunc()
}

// ByHandleStatus orders the results by the handle_status field.
func ByHandleStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleStatus, opts...).ToFunc()
}

// ByHandleMsg orders the results by the handle_msg field.
func ByHandleMsg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleMsg, opts...).ToFunc()
}

// ByHandleTime orders the results by the handle_time field.
func ByHandleTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleTime, opts...).ToFunc()
}

// ByGas orders the results by the gas field.
func ByGas(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGas, opts...).ToFunc()
}

// ByGasPrice orders the results by the gas_price field.
func ByGasPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasPrice, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByHex orders the results by the hex field.
func ByHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHex, opts...).ToFunc()
}

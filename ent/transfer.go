// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/transfer"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// RelatedType holds the value of the "related_type" field.
	RelatedType int64 `json:"related_type,omitempty"`
	// RelatedID holds the value of the "related_id" field.
	RelatedID uint64 `json:"related_id,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID uint64 `json:"chain_id,omitempty"`
	// TxID holds the value of the "tx_id" field.
	TxID string `json:"tx_id,omitempty"`
	// FromAddress holds the value of the "from_address" field.
	FromAddress string `json:"from_address,omitempty"`
	// ToAddress holds the value of the "to_address" field.
	ToAddress string `json:"to_address,omitempty"`
	// eth单位带小数点
	AmountStr string `json:"amount_str,omitempty"`
	// wei单位无小数点
	AmountRaw decimal.Decimal `json:"amount_raw,omitempty"`
	// HandleStatus holds the value of the "handle_status" field.
	HandleStatus int64 `json:"handle_status,omitempty"`
	// HandleMsg holds the value of the "handle_msg" field.
	HandleMsg string `json:"handle_msg,omitempty"`
	// HandleTime holds the value of the "handle_time" field.
	HandleTime time.Time `json:"handle_time,omitempty"`
	// Gas holds the value of the "gas" field.
	Gas int64 `json:"gas,omitempty"`
	// GasPrice holds the value of the "gas_price" field.
	GasPrice int64 `json:"gas_price,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce int64 `json:"nonce,omitempty"`
	// Hex holds the value of the "hex" field.
	Hex          string `json:"hex,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldAmountRaw:
			values[i] = new(decimal.Decimal)
		case transfer.FieldID, transfer.FieldRelatedType, transfer.FieldRelatedID, transfer.FieldChainID, transfer.FieldHandleStatus, transfer.FieldGas, transfer.FieldGasPrice, transfer.FieldNonce:
			values[i] = new(sql.NullInt64)
		case transfer.FieldTxID, transfer.FieldFromAddress, transfer.FieldToAddress, transfer.FieldAmountStr, transfer.FieldHandleMsg, transfer.FieldHex:
			values[i] = new(sql.NullString)
		case transfer.FieldCreatedAt, transfer.FieldUpdatedAt, transfer.FieldDeletedAt, transfer.FieldHandleTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (t *Transfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case transfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transfer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case transfer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				t.DeletedAt = value.Time
			}
		case transfer.FieldRelatedType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field related_type", values[i])
			} else if value.Valid {
				t.RelatedType = value.Int64
			}
		case transfer.FieldRelatedID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field related_id", values[i])
			} else if value.Valid {
				t.RelatedID = uint64(value.Int64)
			}
		case transfer.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				t.ChainID = uint64(value.Int64)
			}
		case transfer.FieldTxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value.Valid {
				t.TxID = value.String
			}
		case transfer.FieldFromAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_address", values[i])
			} else if value.Valid {
				t.FromAddress = value.String
			}
		case transfer.FieldToAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_address", values[i])
			} else if value.Valid {
				t.ToAddress = value.String
			}
		case transfer.FieldAmountStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount_str", values[i])
			} else if value.Valid {
				t.AmountStr = value.String
			}
		case transfer.FieldAmountRaw:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field amount_raw", values[i])
			} else if value != nil {
				t.AmountRaw = *value
			}
		case transfer.FieldHandleStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field handle_status", values[i])
			} else if value.Valid {
				t.HandleStatus = value.Int64
			}
		case transfer.FieldHandleMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field handle_msg", values[i])
			} else if value.Valid {
				t.HandleMsg = value.String
			}
		case transfer.FieldHandleTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field handle_time", values[i])
			} else if value.Valid {
				t.HandleTime = value.Time
			}
		case transfer.FieldGas:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas", values[i])
			} else if value.Valid {
				t.Gas = value.Int64
			}
		case transfer.FieldGasPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_price", values[i])
			} else if value.Valid {
				t.GasPrice = value.Int64
			}
		case transfer.FieldNonce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				t.Nonce = value.Int64
			}
		case transfer.FieldHex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hex", values[i])
			} else if value.Valid {
				t.Hex = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transfer.
// This includes values selected through modifiers, order, etc.
func (t *Transfer) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfer) Update() *TransferUpdateOne {
	return NewTransferClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfer) Unwrap() *Transfer {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfer is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(t.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("related_type=")
	builder.WriteString(fmt.Sprintf("%v", t.RelatedType))
	builder.WriteString(", ")
	builder.WriteString("related_id=")
	builder.WriteString(fmt.Sprintf("%v", t.RelatedID))
	builder.WriteString(", ")
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ChainID))
	builder.WriteString(", ")
	builder.WriteString("tx_id=")
	builder.WriteString(t.TxID)
	builder.WriteString(", ")
	builder.WriteString("from_address=")
	builder.WriteString(t.FromAddress)
	builder.WriteString(", ")
	builder.WriteString("to_address=")
	builder.WriteString(t.ToAddress)
	builder.WriteString(", ")
	builder.WriteString("amount_str=")
	builder.WriteString(t.AmountStr)
	builder.WriteString(", ")
	builder.WriteString("amount_raw=")
	builder.WriteString(fmt.Sprintf("%v", t.AmountRaw))
	builder.WriteString(", ")
	builder.WriteString("handle_status=")
	builder.WriteString(fmt.Sprintf("%v", t.HandleStatus))
	builder.WriteString(", ")
	builder.WriteString("handle_msg=")
	builder.WriteString(t.HandleMsg)
	builder.WriteString(", ")
	builder.WriteString("handle_time=")
	builder.WriteString(t.HandleTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gas=")
	builder.WriteString(fmt.Sprintf("%v", t.Gas))
	builder.WriteString(", ")
	builder.WriteString("gas_price=")
	builder.WriteString(fmt.Sprintf("%v", t.GasPrice))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(fmt.Sprintf("%v", t.Nonce))
	builder.WriteString(", ")
	builder.WriteString("hex=")
	builder.WriteString(t.Hex)
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/product"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// AppType holds the value of the "app_type" field.
	AppType int64 `json:"app_type,omitempty"`
	// AppName holds the value of the "app_name" field.
	AppName string `json:"app_name,omitempty"`
	// AppSecret holds the value of the "app_secret" field.
	AppSecret string `json:"app_secret,omitempty"`
	// AppStatus holds the value of the "app_status" field.
	AppStatus int64 `json:"app_status,omitempty"`
	// WithdrawStatus holds the value of the "withdraw_status" field.
	WithdrawStatus int64 `json:"withdraw_status,omitempty"`
	// WebHook holds the value of the "web_hook" field.
	WebHook      string `json:"web_hook,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldAppType, product.FieldAppStatus, product.FieldWithdrawStatus:
			values[i] = new(sql.NullInt64)
		case product.FieldAppID, product.FieldAppName, product.FieldAppSecret, product.FieldWebHook:
			values[i] = new(sql.NullString)
		case product.FieldCreatedAt, product.FieldUpdatedAt, product.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint64(value.Int64)
		case product.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case product.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case product.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pr.DeletedAt = value.Time
			}
		case product.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				pr.AppID = value.String
			}
		case product.FieldAppType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_type", values[i])
			} else if value.Valid {
				pr.AppType = value.Int64
			}
		case product.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				pr.AppName = value.String
			}
		case product.FieldAppSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_secret", values[i])
			} else if value.Valid {
				pr.AppSecret = value.String
			}
		case product.FieldAppStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_status", values[i])
			} else if value.Valid {
				pr.AppStatus = value.Int64
			}
		case product.FieldWithdrawStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_status", values[i])
			} else if value.Valid {
				pr.WithdrawStatus = value.Int64
			}
		case product.FieldWebHook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field web_hook", values[i])
			} else if value.Valid {
				pr.WebHook = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(pr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(pr.AppID)
	builder.WriteString(", ")
	builder.WriteString("app_type=")
	builder.WriteString(fmt.Sprintf("%v", pr.AppType))
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(pr.AppName)
	builder.WriteString(", ")
	builder.WriteString("app_secret=")
	builder.WriteString(pr.AppSecret)
	builder.WriteString(", ")
	builder.WriteString("app_status=")
	builder.WriteString(fmt.Sprintf("%v", pr.AppStatus))
	builder.WriteString(", ")
	builder.WriteString("withdraw_status=")
	builder.WriteString(fmt.Sprintf("%v", pr.WithdrawStatus))
	builder.WriteString(", ")
	builder.WriteString("web_hook=")
	builder.WriteString(pr.WebHook)
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

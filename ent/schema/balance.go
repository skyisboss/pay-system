// Code generated by entimport

package schema

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

type Balance struct {
	ent.Schema
}

type ChangeLogs struct{}

func (Balance) Fields() []ent.Field {
	return []ent.Field{
		field.Uint64("id"),
		field.Time("created_at").Default(time.Now()).Immutable(),
		field.Time("updated_at").Optional(),
		field.Time("deleted_at").Optional(),
		field.Uint64("chain_id"),
		field.Uint64("product_id"),
		field.Float("balance_amount").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}).Comment("当前余额"),
		// field.String("balance_str").Comment("当前余额-字符串"),

		// 冻结金额，如果用户申请提取n个币，并且余额 >= 申请提款额度，
		// 则从“当前余额”里扣除 n个币，存入“冻结金额”里，待提款交易确认上链后，将冻结金额清0
		field.Float("balance_freeze").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}).Comment("提款冻结金额"),

		// 系统冻结金额，如果用户违规，可将“当前余额”转入“系统冻结金额”，永久禁止
		// field.Float("system_freeze").GoType(decimal.Decimal{}).SchemaType(map[string]string{
		// 	dialect.MySQL: "decimal(32,0)",
		// }).Default(0).Comment("系统冻结金额"),

		// field.Int64("freeze_time"),
		// field.Int64("un_freeze_time"),
		// field.String("deposit_total"),
		// field.String("withdraw_total"),
		field.Float("total_deposit").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}).Comment("总存款金额"),
		// field.String("deposit_str").Comment("总存款金额-字符串"),
		field.Float("total_withdraw").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}).Comment("总取款金额"),
		// field.String("withdraw_str").Comment("总取款金额-字符串"),
		field.Uint64("count_deposit").Comment("存款次数"),
		field.Uint64("count_withdraw").Comment("取款次数"),

		// 账变记录 记录本行所有资金变动
		// [
		// 	{time:xxx, balance_raw:xxx, balance_str:xxx, action: [in/out], ...},
		// 	{time:xxx, balance_raw:xxx, balance_str:xxx, action: [in/out], ...},
		// 	{time:xxx, balance_raw:xxx, balance_str:xxx, action: [in/out], ...},
		// 	...
		// ]
		field.JSON("change_logs", []ChangeLogs{}).Comment("账变记录"),
		field.Int64("version").Comment("数据版本"),
	}

}

func (Balance) Edges() []ent.Edge {
	return nil
}
func (Balance) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "balance"}}
}

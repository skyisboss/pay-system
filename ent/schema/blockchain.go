// Code generated by entimport

package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

type Blockchain struct {
	ent.Schema
}
type GasPrice struct {
	UserGasPrice int64 `json:"user_gas_price"`
	ColdGasPrice int64 `json:"cold_gas_price"`
	TipFeePrice  int64 `json:"tip_fee_price"`
}

func (Blockchain) Fields() []ent.Field {
	return []ent.Field{
		field.Uint64("id"),
		field.Time("created_at").Optional(),
		field.Time("updated_at").Optional(),
		field.Time("deleted_at").Optional(),
		field.String("chain"),
		field.String("types"),
		// field.String("type"),
		field.String("symbol"),
		field.Int64("decimals"),
		field.Int64("status"),
		field.String("token_address"),
		field.String("token_abi").Optional().SchemaType(map[string]string{
			dialect.MySQL: "text",
		}),
		field.String("cold_address"),
		field.String("hot_address"),
		field.Int64("scan_block_num"),
		field.Int64("min_free_num"),
		field.Int64("min_confirm_num"),
		field.Float("withdraw_fee"),
		field.Int64("withdraw_fee_type"),
		field.Float("min_deposit").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}),
		field.Float("min_withdraw").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}),
		field.Float("min_collect").GoType(decimal.Decimal{}).SchemaType(map[string]string{
			dialect.MySQL: "decimal(32,0)",
		}),
		field.JSON("gas_price", GasPrice{}).Optional(),
	}
}
func (Blockchain) Edges() []ent.Edge {
	return nil
}
func (Blockchain) Annotations() []schema.Annotation {
	return []schema.Annotation{entsql.Annotation{Table: "blockchain"}}
}

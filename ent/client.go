// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/skyisboss/pay-system/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/addres"
	"github.com/skyisboss/pay-system/ent/apprun"
	"github.com/skyisboss/pay-system/ent/balance"
	"github.com/skyisboss/pay-system/ent/blockchain"
	"github.com/skyisboss/pay-system/ent/notify"
	"github.com/skyisboss/pay-system/ent/product"
	"github.com/skyisboss/pay-system/ent/transfer"
	"github.com/skyisboss/pay-system/ent/txn"
	"github.com/skyisboss/pay-system/ent/user"
	"github.com/skyisboss/pay-system/ent/withdraw"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Addres is the client for interacting with the Addres builders.
	Addres *AddresClient
	// Apprun is the client for interacting with the Apprun builders.
	Apprun *ApprunClient
	// Balance is the client for interacting with the Balance builders.
	Balance *BalanceClient
	// Blockchain is the client for interacting with the Blockchain builders.
	Blockchain *BlockchainClient
	// Notify is the client for interacting with the Notify builders.
	Notify *NotifyClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Transfer is the client for interacting with the Transfer builders.
	Transfer *TransferClient
	// Txn is the client for interacting with the Txn builders.
	Txn *TxnClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Withdraw is the client for interacting with the Withdraw builders.
	Withdraw *WithdrawClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Addres = NewAddresClient(c.config)
	c.Apprun = NewApprunClient(c.config)
	c.Balance = NewBalanceClient(c.config)
	c.Blockchain = NewBlockchainClient(c.config)
	c.Notify = NewNotifyClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Transfer = NewTransferClient(c.config)
	c.Txn = NewTxnClient(c.config)
	c.User = NewUserClient(c.config)
	c.Withdraw = NewWithdrawClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Addres:     NewAddresClient(cfg),
		Apprun:     NewApprunClient(cfg),
		Balance:    NewBalanceClient(cfg),
		Blockchain: NewBlockchainClient(cfg),
		Notify:     NewNotifyClient(cfg),
		Product:    NewProductClient(cfg),
		Transfer:   NewTransferClient(cfg),
		Txn:        NewTxnClient(cfg),
		User:       NewUserClient(cfg),
		Withdraw:   NewWithdrawClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Addres:     NewAddresClient(cfg),
		Apprun:     NewApprunClient(cfg),
		Balance:    NewBalanceClient(cfg),
		Blockchain: NewBlockchainClient(cfg),
		Notify:     NewNotifyClient(cfg),
		Product:    NewProductClient(cfg),
		Transfer:   NewTransferClient(cfg),
		Txn:        NewTxnClient(cfg),
		User:       NewUserClient(cfg),
		Withdraw:   NewWithdrawClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Addres.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Addres, c.Apprun, c.Balance, c.Blockchain, c.Notify, c.Product, c.Transfer,
		c.Txn, c.User, c.Withdraw,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Addres, c.Apprun, c.Balance, c.Blockchain, c.Notify, c.Product, c.Transfer,
		c.Txn, c.User, c.Withdraw,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddresMutation:
		return c.Addres.mutate(ctx, m)
	case *ApprunMutation:
		return c.Apprun.mutate(ctx, m)
	case *BalanceMutation:
		return c.Balance.mutate(ctx, m)
	case *BlockchainMutation:
		return c.Blockchain.mutate(ctx, m)
	case *NotifyMutation:
		return c.Notify.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *TransferMutation:
		return c.Transfer.mutate(ctx, m)
	case *TxnMutation:
		return c.Txn.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WithdrawMutation:
		return c.Withdraw.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddresClient is a client for the Addres schema.
type AddresClient struct {
	config
}

// NewAddresClient returns a client for the Addres from the given config.
func NewAddresClient(c config) *AddresClient {
	return &AddresClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addres.Hooks(f(g(h())))`.
func (c *AddresClient) Use(hooks ...Hook) {
	c.hooks.Addres = append(c.hooks.Addres, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addres.Intercept(f(g(h())))`.
func (c *AddresClient) Intercept(interceptors ...Interceptor) {
	c.inters.Addres = append(c.inters.Addres, interceptors...)
}

// Create returns a builder for creating a Addres entity.
func (c *AddresClient) Create() *AddresCreate {
	mutation := newAddresMutation(c.config, OpCreate)
	return &AddresCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Addres entities.
func (c *AddresClient) CreateBulk(builders ...*AddresCreate) *AddresCreateBulk {
	return &AddresCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddresClient) MapCreateBulk(slice any, setFunc func(*AddresCreate, int)) *AddresCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddresCreateBulk{err: fmt.Errorf("calling to AddresClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddresCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddresCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Addres.
func (c *AddresClient) Update() *AddresUpdate {
	mutation := newAddresMutation(c.config, OpUpdate)
	return &AddresUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddresClient) UpdateOne(a *Addres) *AddresUpdateOne {
	mutation := newAddresMutation(c.config, OpUpdateOne, withAddres(a))
	return &AddresUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddresClient) UpdateOneID(id uint64) *AddresUpdateOne {
	mutation := newAddresMutation(c.config, OpUpdateOne, withAddresID(id))
	return &AddresUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Addres.
func (c *AddresClient) Delete() *AddresDelete {
	mutation := newAddresMutation(c.config, OpDelete)
	return &AddresDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddresClient) DeleteOne(a *Addres) *AddresDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddresClient) DeleteOneID(id uint64) *AddresDeleteOne {
	builder := c.Delete().Where(addres.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddresDeleteOne{builder}
}

// Query returns a query builder for Addres.
func (c *AddresClient) Query() *AddresQuery {
	return &AddresQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddres},
		inters: c.Interceptors(),
	}
}

// Get returns a Addres entity by its id.
func (c *AddresClient) Get(ctx context.Context, id uint64) (*Addres, error) {
	return c.Query().Where(addres.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddresClient) GetX(ctx context.Context, id uint64) *Addres {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AddresClient) Hooks() []Hook {
	return c.hooks.Addres
}

// Interceptors returns the client interceptors.
func (c *AddresClient) Interceptors() []Interceptor {
	return c.inters.Addres
}

func (c *AddresClient) mutate(ctx context.Context, m *AddresMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddresCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddresUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddresUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddresDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Addres mutation op: %q", m.Op())
	}
}

// ApprunClient is a client for the Apprun schema.
type ApprunClient struct {
	config
}

// NewApprunClient returns a client for the Apprun from the given config.
func NewApprunClient(c config) *ApprunClient {
	return &ApprunClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apprun.Hooks(f(g(h())))`.
func (c *ApprunClient) Use(hooks ...Hook) {
	c.hooks.Apprun = append(c.hooks.Apprun, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apprun.Intercept(f(g(h())))`.
func (c *ApprunClient) Intercept(interceptors ...Interceptor) {
	c.inters.Apprun = append(c.inters.Apprun, interceptors...)
}

// Create returns a builder for creating a Apprun entity.
func (c *ApprunClient) Create() *ApprunCreate {
	mutation := newApprunMutation(c.config, OpCreate)
	return &ApprunCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Apprun entities.
func (c *ApprunClient) CreateBulk(builders ...*ApprunCreate) *ApprunCreateBulk {
	return &ApprunCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ApprunClient) MapCreateBulk(slice any, setFunc func(*ApprunCreate, int)) *ApprunCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ApprunCreateBulk{err: fmt.Errorf("calling to ApprunClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ApprunCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ApprunCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Apprun.
func (c *ApprunClient) Update() *ApprunUpdate {
	mutation := newApprunMutation(c.config, OpUpdate)
	return &ApprunUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApprunClient) UpdateOne(a *Apprun) *ApprunUpdateOne {
	mutation := newApprunMutation(c.config, OpUpdateOne, withApprun(a))
	return &ApprunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApprunClient) UpdateOneID(id uint64) *ApprunUpdateOne {
	mutation := newApprunMutation(c.config, OpUpdateOne, withApprunID(id))
	return &ApprunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Apprun.
func (c *ApprunClient) Delete() *ApprunDelete {
	mutation := newApprunMutation(c.config, OpDelete)
	return &ApprunDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ApprunClient) DeleteOne(a *Apprun) *ApprunDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ApprunClient) DeleteOneID(id uint64) *ApprunDeleteOne {
	builder := c.Delete().Where(apprun.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ApprunDeleteOne{builder}
}

// Query returns a query builder for Apprun.
func (c *ApprunClient) Query() *ApprunQuery {
	return &ApprunQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeApprun},
		inters: c.Interceptors(),
	}
}

// Get returns a Apprun entity by its id.
func (c *ApprunClient) Get(ctx context.Context, id uint64) (*Apprun, error) {
	return c.Query().Where(apprun.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApprunClient) GetX(ctx context.Context, id uint64) *Apprun {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApprunClient) Hooks() []Hook {
	return c.hooks.Apprun
}

// Interceptors returns the client interceptors.
func (c *ApprunClient) Interceptors() []Interceptor {
	return c.inters.Apprun
}

func (c *ApprunClient) mutate(ctx context.Context, m *ApprunMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ApprunCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ApprunUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ApprunUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ApprunDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Apprun mutation op: %q", m.Op())
	}
}

// BalanceClient is a client for the Balance schema.
type BalanceClient struct {
	config
}

// NewBalanceClient returns a client for the Balance from the given config.
func NewBalanceClient(c config) *BalanceClient {
	return &BalanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `balance.Hooks(f(g(h())))`.
func (c *BalanceClient) Use(hooks ...Hook) {
	c.hooks.Balance = append(c.hooks.Balance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `balance.Intercept(f(g(h())))`.
func (c *BalanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Balance = append(c.inters.Balance, interceptors...)
}

// Create returns a builder for creating a Balance entity.
func (c *BalanceClient) Create() *BalanceCreate {
	mutation := newBalanceMutation(c.config, OpCreate)
	return &BalanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Balance entities.
func (c *BalanceClient) CreateBulk(builders ...*BalanceCreate) *BalanceCreateBulk {
	return &BalanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BalanceClient) MapCreateBulk(slice any, setFunc func(*BalanceCreate, int)) *BalanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BalanceCreateBulk{err: fmt.Errorf("calling to BalanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BalanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BalanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Balance.
func (c *BalanceClient) Update() *BalanceUpdate {
	mutation := newBalanceMutation(c.config, OpUpdate)
	return &BalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BalanceClient) UpdateOne(b *Balance) *BalanceUpdateOne {
	mutation := newBalanceMutation(c.config, OpUpdateOne, withBalance(b))
	return &BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BalanceClient) UpdateOneID(id uint64) *BalanceUpdateOne {
	mutation := newBalanceMutation(c.config, OpUpdateOne, withBalanceID(id))
	return &BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Balance.
func (c *BalanceClient) Delete() *BalanceDelete {
	mutation := newBalanceMutation(c.config, OpDelete)
	return &BalanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BalanceClient) DeleteOne(b *Balance) *BalanceDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BalanceClient) DeleteOneID(id uint64) *BalanceDeleteOne {
	builder := c.Delete().Where(balance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BalanceDeleteOne{builder}
}

// Query returns a query builder for Balance.
func (c *BalanceClient) Query() *BalanceQuery {
	return &BalanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBalance},
		inters: c.Interceptors(),
	}
}

// Get returns a Balance entity by its id.
func (c *BalanceClient) Get(ctx context.Context, id uint64) (*Balance, error) {
	return c.Query().Where(balance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BalanceClient) GetX(ctx context.Context, id uint64) *Balance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BalanceClient) Hooks() []Hook {
	return c.hooks.Balance
}

// Interceptors returns the client interceptors.
func (c *BalanceClient) Interceptors() []Interceptor {
	return c.inters.Balance
}

func (c *BalanceClient) mutate(ctx context.Context, m *BalanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BalanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BalanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BalanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BalanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Balance mutation op: %q", m.Op())
	}
}

// BlockchainClient is a client for the Blockchain schema.
type BlockchainClient struct {
	config
}

// NewBlockchainClient returns a client for the Blockchain from the given config.
func NewBlockchainClient(c config) *BlockchainClient {
	return &BlockchainClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blockchain.Hooks(f(g(h())))`.
func (c *BlockchainClient) Use(hooks ...Hook) {
	c.hooks.Blockchain = append(c.hooks.Blockchain, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `blockchain.Intercept(f(g(h())))`.
func (c *BlockchainClient) Intercept(interceptors ...Interceptor) {
	c.inters.Blockchain = append(c.inters.Blockchain, interceptors...)
}

// Create returns a builder for creating a Blockchain entity.
func (c *BlockchainClient) Create() *BlockchainCreate {
	mutation := newBlockchainMutation(c.config, OpCreate)
	return &BlockchainCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Blockchain entities.
func (c *BlockchainClient) CreateBulk(builders ...*BlockchainCreate) *BlockchainCreateBulk {
	return &BlockchainCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BlockchainClient) MapCreateBulk(slice any, setFunc func(*BlockchainCreate, int)) *BlockchainCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BlockchainCreateBulk{err: fmt.Errorf("calling to BlockchainClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BlockchainCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BlockchainCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Blockchain.
func (c *BlockchainClient) Update() *BlockchainUpdate {
	mutation := newBlockchainMutation(c.config, OpUpdate)
	return &BlockchainUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockchainClient) UpdateOne(b *Blockchain) *BlockchainUpdateOne {
	mutation := newBlockchainMutation(c.config, OpUpdateOne, withBlockchain(b))
	return &BlockchainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockchainClient) UpdateOneID(id uint64) *BlockchainUpdateOne {
	mutation := newBlockchainMutation(c.config, OpUpdateOne, withBlockchainID(id))
	return &BlockchainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Blockchain.
func (c *BlockchainClient) Delete() *BlockchainDelete {
	mutation := newBlockchainMutation(c.config, OpDelete)
	return &BlockchainDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlockchainClient) DeleteOne(b *Blockchain) *BlockchainDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BlockchainClient) DeleteOneID(id uint64) *BlockchainDeleteOne {
	builder := c.Delete().Where(blockchain.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockchainDeleteOne{builder}
}

// Query returns a query builder for Blockchain.
func (c *BlockchainClient) Query() *BlockchainQuery {
	return &BlockchainQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBlockchain},
		inters: c.Interceptors(),
	}
}

// Get returns a Blockchain entity by its id.
func (c *BlockchainClient) Get(ctx context.Context, id uint64) (*Blockchain, error) {
	return c.Query().Where(blockchain.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockchainClient) GetX(ctx context.Context, id uint64) *Blockchain {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlockchainClient) Hooks() []Hook {
	return c.hooks.Blockchain
}

// Interceptors returns the client interceptors.
func (c *BlockchainClient) Interceptors() []Interceptor {
	return c.inters.Blockchain
}

func (c *BlockchainClient) mutate(ctx context.Context, m *BlockchainMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BlockchainCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BlockchainUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BlockchainUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BlockchainDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Blockchain mutation op: %q", m.Op())
	}
}

// NotifyClient is a client for the Notify schema.
type NotifyClient struct {
	config
}

// NewNotifyClient returns a client for the Notify from the given config.
func NewNotifyClient(c config) *NotifyClient {
	return &NotifyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notify.Hooks(f(g(h())))`.
func (c *NotifyClient) Use(hooks ...Hook) {
	c.hooks.Notify = append(c.hooks.Notify, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notify.Intercept(f(g(h())))`.
func (c *NotifyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notify = append(c.inters.Notify, interceptors...)
}

// Create returns a builder for creating a Notify entity.
func (c *NotifyClient) Create() *NotifyCreate {
	mutation := newNotifyMutation(c.config, OpCreate)
	return &NotifyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notify entities.
func (c *NotifyClient) CreateBulk(builders ...*NotifyCreate) *NotifyCreateBulk {
	return &NotifyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotifyClient) MapCreateBulk(slice any, setFunc func(*NotifyCreate, int)) *NotifyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotifyCreateBulk{err: fmt.Errorf("calling to NotifyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotifyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotifyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notify.
func (c *NotifyClient) Update() *NotifyUpdate {
	mutation := newNotifyMutation(c.config, OpUpdate)
	return &NotifyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotifyClient) UpdateOne(n *Notify) *NotifyUpdateOne {
	mutation := newNotifyMutation(c.config, OpUpdateOne, withNotify(n))
	return &NotifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotifyClient) UpdateOneID(id uint64) *NotifyUpdateOne {
	mutation := newNotifyMutation(c.config, OpUpdateOne, withNotifyID(id))
	return &NotifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notify.
func (c *NotifyClient) Delete() *NotifyDelete {
	mutation := newNotifyMutation(c.config, OpDelete)
	return &NotifyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotifyClient) DeleteOne(n *Notify) *NotifyDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotifyClient) DeleteOneID(id uint64) *NotifyDeleteOne {
	builder := c.Delete().Where(notify.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotifyDeleteOne{builder}
}

// Query returns a query builder for Notify.
func (c *NotifyClient) Query() *NotifyQuery {
	return &NotifyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotify},
		inters: c.Interceptors(),
	}
}

// Get returns a Notify entity by its id.
func (c *NotifyClient) Get(ctx context.Context, id uint64) (*Notify, error) {
	return c.Query().Where(notify.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotifyClient) GetX(ctx context.Context, id uint64) *Notify {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotifyClient) Hooks() []Hook {
	return c.hooks.Notify
}

// Interceptors returns the client interceptors.
func (c *NotifyClient) Interceptors() []Interceptor {
	return c.inters.Notify
}

func (c *NotifyClient) mutate(ctx context.Context, m *NotifyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotifyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotifyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotifyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notify mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id uint64) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id uint64) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id uint64) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id uint64) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// TransferClient is a client for the Transfer schema.
type TransferClient struct {
	config
}

// NewTransferClient returns a client for the Transfer from the given config.
func NewTransferClient(c config) *TransferClient {
	return &TransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transfer.Hooks(f(g(h())))`.
func (c *TransferClient) Use(hooks ...Hook) {
	c.hooks.Transfer = append(c.hooks.Transfer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `transfer.Intercept(f(g(h())))`.
func (c *TransferClient) Intercept(interceptors ...Interceptor) {
	c.inters.Transfer = append(c.inters.Transfer, interceptors...)
}

// Create returns a builder for creating a Transfer entity.
func (c *TransferClient) Create() *TransferCreate {
	mutation := newTransferMutation(c.config, OpCreate)
	return &TransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transfer entities.
func (c *TransferClient) CreateBulk(builders ...*TransferCreate) *TransferCreateBulk {
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TransferClient) MapCreateBulk(slice any, setFunc func(*TransferCreate, int)) *TransferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TransferCreateBulk{err: fmt.Errorf("calling to TransferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TransferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transfer.
func (c *TransferClient) Update() *TransferUpdate {
	mutation := newTransferMutation(c.config, OpUpdate)
	return &TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransferClient) UpdateOne(t *Transfer) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransfer(t))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransferClient) UpdateOneID(id uint64) *TransferUpdateOne {
	mutation := newTransferMutation(c.config, OpUpdateOne, withTransferID(id))
	return &TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transfer.
func (c *TransferClient) Delete() *TransferDelete {
	mutation := newTransferMutation(c.config, OpDelete)
	return &TransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransferClient) DeleteOne(t *Transfer) *TransferDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransferClient) DeleteOneID(id uint64) *TransferDeleteOne {
	builder := c.Delete().Where(transfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransferDeleteOne{builder}
}

// Query returns a query builder for Transfer.
func (c *TransferClient) Query() *TransferQuery {
	return &TransferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTransfer},
		inters: c.Interceptors(),
	}
}

// Get returns a Transfer entity by its id.
func (c *TransferClient) Get(ctx context.Context, id uint64) (*Transfer, error) {
	return c.Query().Where(transfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransferClient) GetX(ctx context.Context, id uint64) *Transfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TransferClient) Hooks() []Hook {
	return c.hooks.Transfer
}

// Interceptors returns the client interceptors.
func (c *TransferClient) Interceptors() []Interceptor {
	return c.inters.Transfer
}

func (c *TransferClient) mutate(ctx context.Context, m *TransferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TransferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TransferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TransferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Transfer mutation op: %q", m.Op())
	}
}

// TxnClient is a client for the Txn schema.
type TxnClient struct {
	config
}

// NewTxnClient returns a client for the Txn from the given config.
func NewTxnClient(c config) *TxnClient {
	return &TxnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `txn.Hooks(f(g(h())))`.
func (c *TxnClient) Use(hooks ...Hook) {
	c.hooks.Txn = append(c.hooks.Txn, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `txn.Intercept(f(g(h())))`.
func (c *TxnClient) Intercept(interceptors ...Interceptor) {
	c.inters.Txn = append(c.inters.Txn, interceptors...)
}

// Create returns a builder for creating a Txn entity.
func (c *TxnClient) Create() *TxnCreate {
	mutation := newTxnMutation(c.config, OpCreate)
	return &TxnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Txn entities.
func (c *TxnClient) CreateBulk(builders ...*TxnCreate) *TxnCreateBulk {
	return &TxnCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TxnClient) MapCreateBulk(slice any, setFunc func(*TxnCreate, int)) *TxnCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TxnCreateBulk{err: fmt.Errorf("calling to TxnClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TxnCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TxnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Txn.
func (c *TxnClient) Update() *TxnUpdate {
	mutation := newTxnMutation(c.config, OpUpdate)
	return &TxnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TxnClient) UpdateOne(t *Txn) *TxnUpdateOne {
	mutation := newTxnMutation(c.config, OpUpdateOne, withTxn(t))
	return &TxnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TxnClient) UpdateOneID(id uint64) *TxnUpdateOne {
	mutation := newTxnMutation(c.config, OpUpdateOne, withTxnID(id))
	return &TxnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Txn.
func (c *TxnClient) Delete() *TxnDelete {
	mutation := newTxnMutation(c.config, OpDelete)
	return &TxnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TxnClient) DeleteOne(t *Txn) *TxnDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TxnClient) DeleteOneID(id uint64) *TxnDeleteOne {
	builder := c.Delete().Where(txn.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TxnDeleteOne{builder}
}

// Query returns a query builder for Txn.
func (c *TxnClient) Query() *TxnQuery {
	return &TxnQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTxn},
		inters: c.Interceptors(),
	}
}

// Get returns a Txn entity by its id.
func (c *TxnClient) Get(ctx context.Context, id uint64) (*Txn, error) {
	return c.Query().Where(txn.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TxnClient) GetX(ctx context.Context, id uint64) *Txn {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TxnClient) Hooks() []Hook {
	return c.hooks.Txn
}

// Interceptors returns the client interceptors.
func (c *TxnClient) Interceptors() []Interceptor {
	return c.inters.Txn
}

func (c *TxnClient) mutate(ctx context.Context, m *TxnMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TxnCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TxnUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TxnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TxnDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Txn mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WithdrawClient is a client for the Withdraw schema.
type WithdrawClient struct {
	config
}

// NewWithdrawClient returns a client for the Withdraw from the given config.
func NewWithdrawClient(c config) *WithdrawClient {
	return &WithdrawClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `withdraw.Hooks(f(g(h())))`.
func (c *WithdrawClient) Use(hooks ...Hook) {
	c.hooks.Withdraw = append(c.hooks.Withdraw, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `withdraw.Intercept(f(g(h())))`.
func (c *WithdrawClient) Intercept(interceptors ...Interceptor) {
	c.inters.Withdraw = append(c.inters.Withdraw, interceptors...)
}

// Create returns a builder for creating a Withdraw entity.
func (c *WithdrawClient) Create() *WithdrawCreate {
	mutation := newWithdrawMutation(c.config, OpCreate)
	return &WithdrawCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Withdraw entities.
func (c *WithdrawClient) CreateBulk(builders ...*WithdrawCreate) *WithdrawCreateBulk {
	return &WithdrawCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WithdrawClient) MapCreateBulk(slice any, setFunc func(*WithdrawCreate, int)) *WithdrawCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WithdrawCreateBulk{err: fmt.Errorf("calling to WithdrawClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WithdrawCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WithdrawCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Withdraw.
func (c *WithdrawClient) Update() *WithdrawUpdate {
	mutation := newWithdrawMutation(c.config, OpUpdate)
	return &WithdrawUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WithdrawClient) UpdateOne(w *Withdraw) *WithdrawUpdateOne {
	mutation := newWithdrawMutation(c.config, OpUpdateOne, withWithdraw(w))
	return &WithdrawUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WithdrawClient) UpdateOneID(id uint64) *WithdrawUpdateOne {
	mutation := newWithdrawMutation(c.config, OpUpdateOne, withWithdrawID(id))
	return &WithdrawUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Withdraw.
func (c *WithdrawClient) Delete() *WithdrawDelete {
	mutation := newWithdrawMutation(c.config, OpDelete)
	return &WithdrawDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WithdrawClient) DeleteOne(w *Withdraw) *WithdrawDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WithdrawClient) DeleteOneID(id uint64) *WithdrawDeleteOne {
	builder := c.Delete().Where(withdraw.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WithdrawDeleteOne{builder}
}

// Query returns a query builder for Withdraw.
func (c *WithdrawClient) Query() *WithdrawQuery {
	return &WithdrawQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWithdraw},
		inters: c.Interceptors(),
	}
}

// Get returns a Withdraw entity by its id.
func (c *WithdrawClient) Get(ctx context.Context, id uint64) (*Withdraw, error) {
	return c.Query().Where(withdraw.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WithdrawClient) GetX(ctx context.Context, id uint64) *Withdraw {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WithdrawClient) Hooks() []Hook {
	return c.hooks.Withdraw
}

// Interceptors returns the client interceptors.
func (c *WithdrawClient) Interceptors() []Interceptor {
	return c.inters.Withdraw
}

func (c *WithdrawClient) mutate(ctx context.Context, m *WithdrawMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WithdrawCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WithdrawUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WithdrawUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WithdrawDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Withdraw mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Addres, Apprun, Balance, Blockchain, Notify, Product, Transfer, Txn, User,
		Withdraw []ent.Hook
	}
	inters struct {
		Addres, Apprun, Balance, Blockchain, Notify, Product, Transfer, Txn, User,
		Withdraw []ent.Interceptor
	}
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/transfer"
)

// TransferCreate is the builder for creating a Transfer entity.
type TransferCreate struct {
	config
	mutation *TransferMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransferCreate) SetCreatedAt(t time.Time) *TransferCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableCreatedAt(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransferCreate) SetUpdatedAt(t time.Time) *TransferCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableUpdatedAt(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TransferCreate) SetDeletedAt(t time.Time) *TransferCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TransferCreate) SetNillableDeletedAt(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetRelatedType sets the "related_type" field.
func (tc *TransferCreate) SetRelatedType(i int64) *TransferCreate {
	tc.mutation.SetRelatedType(i)
	return tc
}

// SetRelatedID sets the "related_id" field.
func (tc *TransferCreate) SetRelatedID(u uint64) *TransferCreate {
	tc.mutation.SetRelatedID(u)
	return tc
}

// SetChainID sets the "chain_id" field.
func (tc *TransferCreate) SetChainID(u uint64) *TransferCreate {
	tc.mutation.SetChainID(u)
	return tc
}

// SetTxID sets the "tx_id" field.
func (tc *TransferCreate) SetTxID(s string) *TransferCreate {
	tc.mutation.SetTxID(s)
	return tc
}

// SetFromAddress sets the "from_address" field.
func (tc *TransferCreate) SetFromAddress(s string) *TransferCreate {
	tc.mutation.SetFromAddress(s)
	return tc
}

// SetToAddress sets the "to_address" field.
func (tc *TransferCreate) SetToAddress(s string) *TransferCreate {
	tc.mutation.SetToAddress(s)
	return tc
}

// SetAmountStr sets the "amount_str" field.
func (tc *TransferCreate) SetAmountStr(s string) *TransferCreate {
	tc.mutation.SetAmountStr(s)
	return tc
}

// SetAmountRaw sets the "amount_raw" field.
func (tc *TransferCreate) SetAmountRaw(d decimal.Decimal) *TransferCreate {
	tc.mutation.SetAmountRaw(d)
	return tc
}

// SetHandleStatus sets the "handle_status" field.
func (tc *TransferCreate) SetHandleStatus(i int64) *TransferCreate {
	tc.mutation.SetHandleStatus(i)
	return tc
}

// SetNillableHandleStatus sets the "handle_status" field if the given value is not nil.
func (tc *TransferCreate) SetNillableHandleStatus(i *int64) *TransferCreate {
	if i != nil {
		tc.SetHandleStatus(*i)
	}
	return tc
}

// SetHandleMsg sets the "handle_msg" field.
func (tc *TransferCreate) SetHandleMsg(s string) *TransferCreate {
	tc.mutation.SetHandleMsg(s)
	return tc
}

// SetNillableHandleMsg sets the "handle_msg" field if the given value is not nil.
func (tc *TransferCreate) SetNillableHandleMsg(s *string) *TransferCreate {
	if s != nil {
		tc.SetHandleMsg(*s)
	}
	return tc
}

// SetHandleTime sets the "handle_time" field.
func (tc *TransferCreate) SetHandleTime(t time.Time) *TransferCreate {
	tc.mutation.SetHandleTime(t)
	return tc
}

// SetNillableHandleTime sets the "handle_time" field if the given value is not nil.
func (tc *TransferCreate) SetNillableHandleTime(t *time.Time) *TransferCreate {
	if t != nil {
		tc.SetHandleTime(*t)
	}
	return tc
}

// SetGas sets the "gas" field.
func (tc *TransferCreate) SetGas(i int64) *TransferCreate {
	tc.mutation.SetGas(i)
	return tc
}

// SetGasPrice sets the "gas_price" field.
func (tc *TransferCreate) SetGasPrice(i int64) *TransferCreate {
	tc.mutation.SetGasPrice(i)
	return tc
}

// SetNonce sets the "nonce" field.
func (tc *TransferCreate) SetNonce(i int64) *TransferCreate {
	tc.mutation.SetNonce(i)
	return tc
}

// SetHex sets the "hex" field.
func (tc *TransferCreate) SetHex(s string) *TransferCreate {
	tc.mutation.SetHex(s)
	return tc
}

// SetID sets the "id" field.
func (tc *TransferCreate) SetID(u uint64) *TransferCreate {
	tc.mutation.SetID(u)
	return tc
}

// Mutation returns the TransferMutation object of the builder.
func (tc *TransferCreate) Mutation() *TransferMutation {
	return tc.mutation
}

// Save creates the Transfer in the database.
func (tc *TransferCreate) Save(ctx context.Context) (*Transfer, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransferCreate) SaveX(ctx context.Context) *Transfer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransferCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransferCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransferCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := transfer.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.HandleStatus(); !ok {
		v := transfer.DefaultHandleStatus
		tc.mutation.SetHandleStatus(v)
	}
	if _, ok := tc.mutation.HandleMsg(); !ok {
		v := transfer.DefaultHandleMsg
		tc.mutation.SetHandleMsg(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransferCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Transfer.created_at"`)}
	}
	if _, ok := tc.mutation.RelatedType(); !ok {
		return &ValidationError{Name: "related_type", err: errors.New(`ent: missing required field "Transfer.related_type"`)}
	}
	if _, ok := tc.mutation.RelatedID(); !ok {
		return &ValidationError{Name: "related_id", err: errors.New(`ent: missing required field "Transfer.related_id"`)}
	}
	if _, ok := tc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Transfer.chain_id"`)}
	}
	if _, ok := tc.mutation.TxID(); !ok {
		return &ValidationError{Name: "tx_id", err: errors.New(`ent: missing required field "Transfer.tx_id"`)}
	}
	if _, ok := tc.mutation.FromAddress(); !ok {
		return &ValidationError{Name: "from_address", err: errors.New(`ent: missing required field "Transfer.from_address"`)}
	}
	if _, ok := tc.mutation.ToAddress(); !ok {
		return &ValidationError{Name: "to_address", err: errors.New(`ent: missing required field "Transfer.to_address"`)}
	}
	if _, ok := tc.mutation.AmountStr(); !ok {
		return &ValidationError{Name: "amount_str", err: errors.New(`ent: missing required field "Transfer.amount_str"`)}
	}
	if _, ok := tc.mutation.AmountRaw(); !ok {
		return &ValidationError{Name: "amount_raw", err: errors.New(`ent: missing required field "Transfer.amount_raw"`)}
	}
	if _, ok := tc.mutation.HandleStatus(); !ok {
		return &ValidationError{Name: "handle_status", err: errors.New(`ent: missing required field "Transfer.handle_status"`)}
	}
	if _, ok := tc.mutation.HandleMsg(); !ok {
		return &ValidationError{Name: "handle_msg", err: errors.New(`ent: missing required field "Transfer.handle_msg"`)}
	}
	if _, ok := tc.mutation.Gas(); !ok {
		return &ValidationError{Name: "gas", err: errors.New(`ent: missing required field "Transfer.gas"`)}
	}
	if _, ok := tc.mutation.GasPrice(); !ok {
		return &ValidationError{Name: "gas_price", err: errors.New(`ent: missing required field "Transfer.gas_price"`)}
	}
	if _, ok := tc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "Transfer.nonce"`)}
	}
	if _, ok := tc.mutation.Hex(); !ok {
		return &ValidationError{Name: "hex", err: errors.New(`ent: missing required field "Transfer.hex"`)}
	}
	return nil
}

func (tc *TransferCreate) sqlSave(ctx context.Context) (*Transfer, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransferCreate) createSpec() (*Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Transfer{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transfer.Table, sqlgraph.NewFieldSpec(transfer.FieldID, field.TypeUint64))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(transfer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(transfer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(transfer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.RelatedType(); ok {
		_spec.SetField(transfer.FieldRelatedType, field.TypeInt64, value)
		_node.RelatedType = value
	}
	if value, ok := tc.mutation.RelatedID(); ok {
		_spec.SetField(transfer.FieldRelatedID, field.TypeUint64, value)
		_node.RelatedID = value
	}
	if value, ok := tc.mutation.ChainID(); ok {
		_spec.SetField(transfer.FieldChainID, field.TypeUint64, value)
		_node.ChainID = value
	}
	if value, ok := tc.mutation.TxID(); ok {
		_spec.SetField(transfer.FieldTxID, field.TypeString, value)
		_node.TxID = value
	}
	if value, ok := tc.mutation.FromAddress(); ok {
		_spec.SetField(transfer.FieldFromAddress, field.TypeString, value)
		_node.FromAddress = value
	}
	if value, ok := tc.mutation.ToAddress(); ok {
		_spec.SetField(transfer.FieldToAddress, field.TypeString, value)
		_node.ToAddress = value
	}
	if value, ok := tc.mutation.AmountStr(); ok {
		_spec.SetField(transfer.FieldAmountStr, field.TypeString, value)
		_node.AmountStr = value
	}
	if value, ok := tc.mutation.AmountRaw(); ok {
		_spec.SetField(transfer.FieldAmountRaw, field.TypeFloat64, value)
		_node.AmountRaw = value
	}
	if value, ok := tc.mutation.HandleStatus(); ok {
		_spec.SetField(transfer.FieldHandleStatus, field.TypeInt64, value)
		_node.HandleStatus = value
	}
	if value, ok := tc.mutation.HandleMsg(); ok {
		_spec.SetField(transfer.FieldHandleMsg, field.TypeString, value)
		_node.HandleMsg = value
	}
	if value, ok := tc.mutation.HandleTime(); ok {
		_spec.SetField(transfer.FieldHandleTime, field.TypeTime, value)
		_node.HandleTime = value
	}
	if value, ok := tc.mutation.Gas(); ok {
		_spec.SetField(transfer.FieldGas, field.TypeInt64, value)
		_node.Gas = value
	}
	if value, ok := tc.mutation.GasPrice(); ok {
		_spec.SetField(transfer.FieldGasPrice, field.TypeInt64, value)
		_node.GasPrice = value
	}
	if value, ok := tc.mutation.Nonce(); ok {
		_spec.SetField(transfer.FieldNonce, field.TypeInt64, value)
		_node.Nonce = value
	}
	if value, ok := tc.mutation.Hex(); ok {
		_spec.SetField(transfer.FieldHex, field.TypeString, value)
		_node.Hex = value
	}
	return _node, _spec
}

// TransferCreateBulk is the builder for creating many Transfer entities in bulk.
type TransferCreateBulk struct {
	config
	err      error
	builders []*TransferCreate
}

// Save creates the Transfer entities in the database.
func (tcb *TransferCreateBulk) Save(ctx context.Context) ([]*Transfer, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transfer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransferCreateBulk) SaveX(ctx context.Context) []*Transfer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransferCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransferCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

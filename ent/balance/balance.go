// Code generated by ent, DO NOT EDIT.

package balance

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the balance type in the database.
	Label = "balance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldBalanceAmount holds the string denoting the balance_amount field in the database.
	FieldBalanceAmount = "balance_amount"
	// FieldBalanceFreeze holds the string denoting the balance_freeze field in the database.
	FieldBalanceFreeze = "balance_freeze"
	// FieldTotalDeposit holds the string denoting the total_deposit field in the database.
	FieldTotalDeposit = "total_deposit"
	// FieldTotalWithdraw holds the string denoting the total_withdraw field in the database.
	FieldTotalWithdraw = "total_withdraw"
	// FieldCountDeposit holds the string denoting the count_deposit field in the database.
	FieldCountDeposit = "count_deposit"
	// FieldCountWithdraw holds the string denoting the count_withdraw field in the database.
	FieldCountWithdraw = "count_withdraw"
	// FieldChangeLogs holds the string denoting the change_logs field in the database.
	FieldChangeLogs = "change_logs"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// Table holds the table name of the balance in the database.
	Table = "balance"
)

// Columns holds all SQL columns for balance fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldChainID,
	FieldProductID,
	FieldBalanceAmount,
	FieldBalanceFreeze,
	FieldTotalDeposit,
	FieldTotalWithdraw,
	FieldCountDeposit,
	FieldCountWithdraw,
	FieldChangeLogs,
	FieldVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Balance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByBalanceAmount orders the results by the balance_amount field.
func ByBalanceAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalanceAmount, opts...).ToFunc()
}

// ByBalanceFreeze orders the results by the balance_freeze field.
func ByBalanceFreeze(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalanceFreeze, opts...).ToFunc()
}

// ByTotalDeposit orders the results by the total_deposit field.
func ByTotalDeposit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalDeposit, opts...).ToFunc()
}

// ByTotalWithdraw orders the results by the total_withdraw field.
func ByTotalWithdraw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalWithdraw, opts...).ToFunc()
}

// ByCountDeposit orders the results by the count_deposit field.
func ByCountDeposit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountDeposit, opts...).ToFunc()
}

// ByCountWithdraw orders the results by the count_withdraw field.
func ByCountWithdraw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountWithdraw, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

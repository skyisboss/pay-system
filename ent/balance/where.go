// Code generated by ent, DO NOT EDIT.

package balance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldDeletedAt, v))
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldChainID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldProductID, v))
}

// BalanceAmount applies equality check predicate on the "balance_amount" field. It's identical to BalanceAmountEQ.
func BalanceAmount(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldBalanceAmount, v))
}

// BalanceFreeze applies equality check predicate on the "balance_freeze" field. It's identical to BalanceFreezeEQ.
func BalanceFreeze(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldBalanceFreeze, v))
}

// TotalDeposit applies equality check predicate on the "total_deposit" field. It's identical to TotalDepositEQ.
func TotalDeposit(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldTotalDeposit, v))
}

// TotalWithdraw applies equality check predicate on the "total_withdraw" field. It's identical to TotalWithdrawEQ.
func TotalWithdraw(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldTotalWithdraw, v))
}

// CountDeposit applies equality check predicate on the "count_deposit" field. It's identical to CountDepositEQ.
func CountDeposit(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCountDeposit, v))
}

// CountWithdraw applies equality check predicate on the "count_withdraw" field. It's identical to CountWithdrawEQ.
func CountWithdraw(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCountWithdraw, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Balance {
	return predicate.Balance(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Balance {
	return predicate.Balance(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Balance {
	return predicate.Balance(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Balance {
	return predicate.Balance(sql.FieldNotNull(FieldDeletedAt))
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldChainID, v))
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldChainID, v))
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldChainID, vs...))
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldChainID, vs...))
}

// ChainIDGT applies the GT predicate on the "chain_id" field.
func ChainIDGT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldChainID, v))
}

// ChainIDGTE applies the GTE predicate on the "chain_id" field.
func ChainIDGTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldChainID, v))
}

// ChainIDLT applies the LT predicate on the "chain_id" field.
func ChainIDLT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldChainID, v))
}

// ChainIDLTE applies the LTE predicate on the "chain_id" field.
func ChainIDLTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldChainID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldProductID, v))
}

// BalanceAmountEQ applies the EQ predicate on the "balance_amount" field.
func BalanceAmountEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldBalanceAmount, v))
}

// BalanceAmountNEQ applies the NEQ predicate on the "balance_amount" field.
func BalanceAmountNEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldBalanceAmount, v))
}

// BalanceAmountIn applies the In predicate on the "balance_amount" field.
func BalanceAmountIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldBalanceAmount, vs...))
}

// BalanceAmountNotIn applies the NotIn predicate on the "balance_amount" field.
func BalanceAmountNotIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldBalanceAmount, vs...))
}

// BalanceAmountGT applies the GT predicate on the "balance_amount" field.
func BalanceAmountGT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldBalanceAmount, v))
}

// BalanceAmountGTE applies the GTE predicate on the "balance_amount" field.
func BalanceAmountGTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldBalanceAmount, v))
}

// BalanceAmountLT applies the LT predicate on the "balance_amount" field.
func BalanceAmountLT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldBalanceAmount, v))
}

// BalanceAmountLTE applies the LTE predicate on the "balance_amount" field.
func BalanceAmountLTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldBalanceAmount, v))
}

// BalanceFreezeEQ applies the EQ predicate on the "balance_freeze" field.
func BalanceFreezeEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldBalanceFreeze, v))
}

// BalanceFreezeNEQ applies the NEQ predicate on the "balance_freeze" field.
func BalanceFreezeNEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldBalanceFreeze, v))
}

// BalanceFreezeIn applies the In predicate on the "balance_freeze" field.
func BalanceFreezeIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldBalanceFreeze, vs...))
}

// BalanceFreezeNotIn applies the NotIn predicate on the "balance_freeze" field.
func BalanceFreezeNotIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldBalanceFreeze, vs...))
}

// BalanceFreezeGT applies the GT predicate on the "balance_freeze" field.
func BalanceFreezeGT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldBalanceFreeze, v))
}

// BalanceFreezeGTE applies the GTE predicate on the "balance_freeze" field.
func BalanceFreezeGTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldBalanceFreeze, v))
}

// BalanceFreezeLT applies the LT predicate on the "balance_freeze" field.
func BalanceFreezeLT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldBalanceFreeze, v))
}

// BalanceFreezeLTE applies the LTE predicate on the "balance_freeze" field.
func BalanceFreezeLTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldBalanceFreeze, v))
}

// TotalDepositEQ applies the EQ predicate on the "total_deposit" field.
func TotalDepositEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldTotalDeposit, v))
}

// TotalDepositNEQ applies the NEQ predicate on the "total_deposit" field.
func TotalDepositNEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldTotalDeposit, v))
}

// TotalDepositIn applies the In predicate on the "total_deposit" field.
func TotalDepositIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldTotalDeposit, vs...))
}

// TotalDepositNotIn applies the NotIn predicate on the "total_deposit" field.
func TotalDepositNotIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldTotalDeposit, vs...))
}

// TotalDepositGT applies the GT predicate on the "total_deposit" field.
func TotalDepositGT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldTotalDeposit, v))
}

// TotalDepositGTE applies the GTE predicate on the "total_deposit" field.
func TotalDepositGTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldTotalDeposit, v))
}

// TotalDepositLT applies the LT predicate on the "total_deposit" field.
func TotalDepositLT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldTotalDeposit, v))
}

// TotalDepositLTE applies the LTE predicate on the "total_deposit" field.
func TotalDepositLTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldTotalDeposit, v))
}

// TotalWithdrawEQ applies the EQ predicate on the "total_withdraw" field.
func TotalWithdrawEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldTotalWithdraw, v))
}

// TotalWithdrawNEQ applies the NEQ predicate on the "total_withdraw" field.
func TotalWithdrawNEQ(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldTotalWithdraw, v))
}

// TotalWithdrawIn applies the In predicate on the "total_withdraw" field.
func TotalWithdrawIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldTotalWithdraw, vs...))
}

// TotalWithdrawNotIn applies the NotIn predicate on the "total_withdraw" field.
func TotalWithdrawNotIn(vs ...decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldTotalWithdraw, vs...))
}

// TotalWithdrawGT applies the GT predicate on the "total_withdraw" field.
func TotalWithdrawGT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldTotalWithdraw, v))
}

// TotalWithdrawGTE applies the GTE predicate on the "total_withdraw" field.
func TotalWithdrawGTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldTotalWithdraw, v))
}

// TotalWithdrawLT applies the LT predicate on the "total_withdraw" field.
func TotalWithdrawLT(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldTotalWithdraw, v))
}

// TotalWithdrawLTE applies the LTE predicate on the "total_withdraw" field.
func TotalWithdrawLTE(v decimal.Decimal) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldTotalWithdraw, v))
}

// CountDepositEQ applies the EQ predicate on the "count_deposit" field.
func CountDepositEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCountDeposit, v))
}

// CountDepositNEQ applies the NEQ predicate on the "count_deposit" field.
func CountDepositNEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldCountDeposit, v))
}

// CountDepositIn applies the In predicate on the "count_deposit" field.
func CountDepositIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldCountDeposit, vs...))
}

// CountDepositNotIn applies the NotIn predicate on the "count_deposit" field.
func CountDepositNotIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldCountDeposit, vs...))
}

// CountDepositGT applies the GT predicate on the "count_deposit" field.
func CountDepositGT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldCountDeposit, v))
}

// CountDepositGTE applies the GTE predicate on the "count_deposit" field.
func CountDepositGTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldCountDeposit, v))
}

// CountDepositLT applies the LT predicate on the "count_deposit" field.
func CountDepositLT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldCountDeposit, v))
}

// CountDepositLTE applies the LTE predicate on the "count_deposit" field.
func CountDepositLTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldCountDeposit, v))
}

// CountWithdrawEQ applies the EQ predicate on the "count_withdraw" field.
func CountWithdrawEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldCountWithdraw, v))
}

// CountWithdrawNEQ applies the NEQ predicate on the "count_withdraw" field.
func CountWithdrawNEQ(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldCountWithdraw, v))
}

// CountWithdrawIn applies the In predicate on the "count_withdraw" field.
func CountWithdrawIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldCountWithdraw, vs...))
}

// CountWithdrawNotIn applies the NotIn predicate on the "count_withdraw" field.
func CountWithdrawNotIn(vs ...uint64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldCountWithdraw, vs...))
}

// CountWithdrawGT applies the GT predicate on the "count_withdraw" field.
func CountWithdrawGT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldCountWithdraw, v))
}

// CountWithdrawGTE applies the GTE predicate on the "count_withdraw" field.
func CountWithdrawGTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldCountWithdraw, v))
}

// CountWithdrawLT applies the LT predicate on the "count_withdraw" field.
func CountWithdrawLT(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldCountWithdraw, v))
}

// CountWithdrawLTE applies the LTE predicate on the "count_withdraw" field.
func CountWithdrawLTE(v uint64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldCountWithdraw, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Balance {
	return predicate.Balance(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Balance {
	return predicate.Balance(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Balance {
	return predicate.Balance(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Balance) predicate.Balance {
	return predicate.Balance(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/balance"
	"github.com/skyisboss/pay-system/ent/schema"
)

// BalanceCreate is the builder for creating a Balance entity.
type BalanceCreate struct {
	config
	mutation *BalanceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BalanceCreate) SetCreatedAt(t time.Time) *BalanceCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BalanceCreate) SetNillableCreatedAt(t *time.Time) *BalanceCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BalanceCreate) SetUpdatedAt(t time.Time) *BalanceCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BalanceCreate) SetNillableUpdatedAt(t *time.Time) *BalanceCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BalanceCreate) SetDeletedAt(t time.Time) *BalanceCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BalanceCreate) SetNillableDeletedAt(t *time.Time) *BalanceCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetChainID sets the "chain_id" field.
func (bc *BalanceCreate) SetChainID(u uint64) *BalanceCreate {
	bc.mutation.SetChainID(u)
	return bc
}

// SetProductID sets the "product_id" field.
func (bc *BalanceCreate) SetProductID(u uint64) *BalanceCreate {
	bc.mutation.SetProductID(u)
	return bc
}

// SetBalanceAmount sets the "balance_amount" field.
func (bc *BalanceCreate) SetBalanceAmount(d decimal.Decimal) *BalanceCreate {
	bc.mutation.SetBalanceAmount(d)
	return bc
}

// SetBalanceFreeze sets the "balance_freeze" field.
func (bc *BalanceCreate) SetBalanceFreeze(d decimal.Decimal) *BalanceCreate {
	bc.mutation.SetBalanceFreeze(d)
	return bc
}

// SetTotalDeposit sets the "total_deposit" field.
func (bc *BalanceCreate) SetTotalDeposit(d decimal.Decimal) *BalanceCreate {
	bc.mutation.SetTotalDeposit(d)
	return bc
}

// SetTotalWithdraw sets the "total_withdraw" field.
func (bc *BalanceCreate) SetTotalWithdraw(d decimal.Decimal) *BalanceCreate {
	bc.mutation.SetTotalWithdraw(d)
	return bc
}

// SetCountDeposit sets the "count_deposit" field.
func (bc *BalanceCreate) SetCountDeposit(u uint64) *BalanceCreate {
	bc.mutation.SetCountDeposit(u)
	return bc
}

// SetCountWithdraw sets the "count_withdraw" field.
func (bc *BalanceCreate) SetCountWithdraw(u uint64) *BalanceCreate {
	bc.mutation.SetCountWithdraw(u)
	return bc
}

// SetChangeLogs sets the "change_logs" field.
func (bc *BalanceCreate) SetChangeLogs(sl []schema.ChangeLogs) *BalanceCreate {
	bc.mutation.SetChangeLogs(sl)
	return bc
}

// SetVersion sets the "version" field.
func (bc *BalanceCreate) SetVersion(i int64) *BalanceCreate {
	bc.mutation.SetVersion(i)
	return bc
}

// SetID sets the "id" field.
func (bc *BalanceCreate) SetID(u uint64) *BalanceCreate {
	bc.mutation.SetID(u)
	return bc
}

// Mutation returns the BalanceMutation object of the builder.
func (bc *BalanceCreate) Mutation() *BalanceMutation {
	return bc.mutation
}

// Save creates the Balance in the database.
func (bc *BalanceCreate) Save(ctx context.Context) (*Balance, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BalanceCreate) SaveX(ctx context.Context) *Balance {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BalanceCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BalanceCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BalanceCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := balance.DefaultCreatedAt
		bc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BalanceCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Balance.created_at"`)}
	}
	if _, ok := bc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Balance.chain_id"`)}
	}
	if _, ok := bc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Balance.product_id"`)}
	}
	if _, ok := bc.mutation.BalanceAmount(); !ok {
		return &ValidationError{Name: "balance_amount", err: errors.New(`ent: missing required field "Balance.balance_amount"`)}
	}
	if _, ok := bc.mutation.BalanceFreeze(); !ok {
		return &ValidationError{Name: "balance_freeze", err: errors.New(`ent: missing required field "Balance.balance_freeze"`)}
	}
	if _, ok := bc.mutation.TotalDeposit(); !ok {
		return &ValidationError{Name: "total_deposit", err: errors.New(`ent: missing required field "Balance.total_deposit"`)}
	}
	if _, ok := bc.mutation.TotalWithdraw(); !ok {
		return &ValidationError{Name: "total_withdraw", err: errors.New(`ent: missing required field "Balance.total_withdraw"`)}
	}
	if _, ok := bc.mutation.CountDeposit(); !ok {
		return &ValidationError{Name: "count_deposit", err: errors.New(`ent: missing required field "Balance.count_deposit"`)}
	}
	if _, ok := bc.mutation.CountWithdraw(); !ok {
		return &ValidationError{Name: "count_withdraw", err: errors.New(`ent: missing required field "Balance.count_withdraw"`)}
	}
	if _, ok := bc.mutation.ChangeLogs(); !ok {
		return &ValidationError{Name: "change_logs", err: errors.New(`ent: missing required field "Balance.change_logs"`)}
	}
	if _, ok := bc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Balance.version"`)}
	}
	return nil
}

func (bc *BalanceCreate) sqlSave(ctx context.Context) (*Balance, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BalanceCreate) createSpec() (*Balance, *sqlgraph.CreateSpec) {
	var (
		_node = &Balance{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(balance.Table, sqlgraph.NewFieldSpec(balance.FieldID, field.TypeUint64))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(balance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(balance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(balance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.ChainID(); ok {
		_spec.SetField(balance.FieldChainID, field.TypeUint64, value)
		_node.ChainID = value
	}
	if value, ok := bc.mutation.ProductID(); ok {
		_spec.SetField(balance.FieldProductID, field.TypeUint64, value)
		_node.ProductID = value
	}
	if value, ok := bc.mutation.BalanceAmount(); ok {
		_spec.SetField(balance.FieldBalanceAmount, field.TypeFloat64, value)
		_node.BalanceAmount = value
	}
	if value, ok := bc.mutation.BalanceFreeze(); ok {
		_spec.SetField(balance.FieldBalanceFreeze, field.TypeFloat64, value)
		_node.BalanceFreeze = value
	}
	if value, ok := bc.mutation.TotalDeposit(); ok {
		_spec.SetField(balance.FieldTotalDeposit, field.TypeFloat64, value)
		_node.TotalDeposit = value
	}
	if value, ok := bc.mutation.TotalWithdraw(); ok {
		_spec.SetField(balance.FieldTotalWithdraw, field.TypeFloat64, value)
		_node.TotalWithdraw = value
	}
	if value, ok := bc.mutation.CountDeposit(); ok {
		_spec.SetField(balance.FieldCountDeposit, field.TypeUint64, value)
		_node.CountDeposit = value
	}
	if value, ok := bc.mutation.CountWithdraw(); ok {
		_spec.SetField(balance.FieldCountWithdraw, field.TypeUint64, value)
		_node.CountWithdraw = value
	}
	if value, ok := bc.mutation.ChangeLogs(); ok {
		_spec.SetField(balance.FieldChangeLogs, field.TypeJSON, value)
		_node.ChangeLogs = value
	}
	if value, ok := bc.mutation.Version(); ok {
		_spec.SetField(balance.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	return _node, _spec
}

// BalanceCreateBulk is the builder for creating many Balance entities in bulk.
type BalanceCreateBulk struct {
	config
	err      error
	builders []*BalanceCreate
}

// Save creates the Balance entities in the database.
func (bcb *BalanceCreateBulk) Save(ctx context.Context) ([]*Balance, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Balance, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BalanceCreateBulk) SaveX(ctx context.Context) []*Balance {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BalanceCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

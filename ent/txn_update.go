// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
	"github.com/skyisboss/pay-system/ent/predicate"
	"github.com/skyisboss/pay-system/ent/txn"
)

// TxnUpdate is the builder for updating Txn entities.
type TxnUpdate struct {
	config
	hooks    []Hook
	mutation *TxnMutation
}

// Where appends a list predicates to the TxnUpdate builder.
func (tu *TxnUpdate) Where(ps ...predicate.Txn) *TxnUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TxnUpdate) SetUpdatedAt(t time.Time) *TxnUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableUpdatedAt(t *time.Time) *TxnUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TxnUpdate) ClearUpdatedAt() *TxnUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetDeletedAt sets the "deleted_at" field.
func (tu *TxnUpdate) SetDeletedAt(t time.Time) *TxnUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableDeletedAt(t *time.Time) *TxnUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tu *TxnUpdate) ClearDeletedAt() *TxnUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetTxID sets the "tx_id" field.
func (tu *TxnUpdate) SetTxID(s string) *TxnUpdate {
	tu.mutation.SetTxID(s)
	return tu
}

// SetChainID sets the "chain_id" field.
func (tu *TxnUpdate) SetChainID(u uint64) *TxnUpdate {
	tu.mutation.ResetChainID()
	tu.mutation.SetChainID(u)
	return tu
}

// AddChainID adds u to the "chain_id" field.
func (tu *TxnUpdate) AddChainID(u int64) *TxnUpdate {
	tu.mutation.AddChainID(u)
	return tu
}

// SetProductID sets the "product_id" field.
func (tu *TxnUpdate) SetProductID(i int64) *TxnUpdate {
	tu.mutation.ResetProductID()
	tu.mutation.SetProductID(i)
	return tu
}

// AddProductID adds i to the "product_id" field.
func (tu *TxnUpdate) AddProductID(i int64) *TxnUpdate {
	tu.mutation.AddProductID(i)
	return tu
}

// SetFromAddress sets the "from_address" field.
func (tu *TxnUpdate) SetFromAddress(s string) *TxnUpdate {
	tu.mutation.SetFromAddress(s)
	return tu
}

// SetToAddress sets the "to_address" field.
func (tu *TxnUpdate) SetToAddress(s string) *TxnUpdate {
	tu.mutation.SetToAddress(s)
	return tu
}

// SetAmountStr sets the "amount_str" field.
func (tu *TxnUpdate) SetAmountStr(s string) *TxnUpdate {
	tu.mutation.SetAmountStr(s)
	return tu
}

// SetAmountRaw sets the "amount_raw" field.
func (tu *TxnUpdate) SetAmountRaw(d decimal.Decimal) *TxnUpdate {
	tu.mutation.ResetAmountRaw()
	tu.mutation.SetAmountRaw(d)
	return tu
}

// AddAmountRaw adds d to the "amount_raw" field.
func (tu *TxnUpdate) AddAmountRaw(d decimal.Decimal) *TxnUpdate {
	tu.mutation.AddAmountRaw(d)
	return tu
}

// SetHandleStatus sets the "handle_status" field.
func (tu *TxnUpdate) SetHandleStatus(i int64) *TxnUpdate {
	tu.mutation.ResetHandleStatus()
	tu.mutation.SetHandleStatus(i)
	return tu
}

// SetNillableHandleStatus sets the "handle_status" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableHandleStatus(i *int64) *TxnUpdate {
	if i != nil {
		tu.SetHandleStatus(*i)
	}
	return tu
}

// AddHandleStatus adds i to the "handle_status" field.
func (tu *TxnUpdate) AddHandleStatus(i int64) *TxnUpdate {
	tu.mutation.AddHandleStatus(i)
	return tu
}

// SetHandleMsg sets the "handle_msg" field.
func (tu *TxnUpdate) SetHandleMsg(s string) *TxnUpdate {
	tu.mutation.SetHandleMsg(s)
	return tu
}

// SetNillableHandleMsg sets the "handle_msg" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableHandleMsg(s *string) *TxnUpdate {
	if s != nil {
		tu.SetHandleMsg(*s)
	}
	return tu
}

// ClearHandleMsg clears the value of the "handle_msg" field.
func (tu *TxnUpdate) ClearHandleMsg() *TxnUpdate {
	tu.mutation.ClearHandleMsg()
	return tu
}

// SetHandleTime sets the "handle_time" field.
func (tu *TxnUpdate) SetHandleTime(t time.Time) *TxnUpdate {
	tu.mutation.SetHandleTime(t)
	return tu
}

// SetNillableHandleTime sets the "handle_time" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableHandleTime(t *time.Time) *TxnUpdate {
	if t != nil {
		tu.SetHandleTime(*t)
	}
	return tu
}

// ClearHandleTime clears the value of the "handle_time" field.
func (tu *TxnUpdate) ClearHandleTime() *TxnUpdate {
	tu.mutation.ClearHandleTime()
	return tu
}

// SetCollectStatus sets the "collect_status" field.
func (tu *TxnUpdate) SetCollectStatus(i int64) *TxnUpdate {
	tu.mutation.ResetCollectStatus()
	tu.mutation.SetCollectStatus(i)
	return tu
}

// SetNillableCollectStatus sets the "collect_status" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableCollectStatus(i *int64) *TxnUpdate {
	if i != nil {
		tu.SetCollectStatus(*i)
	}
	return tu
}

// AddCollectStatus adds i to the "collect_status" field.
func (tu *TxnUpdate) AddCollectStatus(i int64) *TxnUpdate {
	tu.mutation.AddCollectStatus(i)
	return tu
}

// SetCollectMsg sets the "collect_msg" field.
func (tu *TxnUpdate) SetCollectMsg(s string) *TxnUpdate {
	tu.mutation.SetCollectMsg(s)
	return tu
}

// SetNillableCollectMsg sets the "collect_msg" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableCollectMsg(s *string) *TxnUpdate {
	if s != nil {
		tu.SetCollectMsg(*s)
	}
	return tu
}

// ClearCollectMsg clears the value of the "collect_msg" field.
func (tu *TxnUpdate) ClearCollectMsg() *TxnUpdate {
	tu.mutation.ClearCollectMsg()
	return tu
}

// SetCollectTime sets the "collect_time" field.
func (tu *TxnUpdate) SetCollectTime(t time.Time) *TxnUpdate {
	tu.mutation.SetCollectTime(t)
	return tu
}

// SetNillableCollectTime sets the "collect_time" field if the given value is not nil.
func (tu *TxnUpdate) SetNillableCollectTime(t *time.Time) *TxnUpdate {
	if t != nil {
		tu.SetCollectTime(*t)
	}
	return tu
}

// ClearCollectTime clears the value of the "collect_time" field.
func (tu *TxnUpdate) ClearCollectTime() *TxnUpdate {
	tu.mutation.ClearCollectTime()
	return tu
}

// Mutation returns the TxnMutation object of the builder.
func (tu *TxnUpdate) Mutation() *TxnMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TxnUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TxnUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TxnUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TxnUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TxnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(txn.Table, txn.Columns, sqlgraph.NewFieldSpec(txn.FieldID, field.TypeUint64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(txn.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(txn.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(txn.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(txn.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.TxID(); ok {
		_spec.SetField(txn.FieldTxID, field.TypeString, value)
	}
	if value, ok := tu.mutation.ChainID(); ok {
		_spec.SetField(txn.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedChainID(); ok {
		_spec.AddField(txn.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.ProductID(); ok {
		_spec.SetField(txn.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedProductID(); ok {
		_spec.AddField(txn.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.FromAddress(); ok {
		_spec.SetField(txn.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.ToAddress(); ok {
		_spec.SetField(txn.FieldToAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.AmountStr(); ok {
		_spec.SetField(txn.FieldAmountStr, field.TypeString, value)
	}
	if value, ok := tu.mutation.AmountRaw(); ok {
		_spec.SetField(txn.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmountRaw(); ok {
		_spec.AddField(txn.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.HandleStatus(); ok {
		_spec.SetField(txn.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedHandleStatus(); ok {
		_spec.AddField(txn.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.HandleMsg(); ok {
		_spec.SetField(txn.FieldHandleMsg, field.TypeString, value)
	}
	if tu.mutation.HandleMsgCleared() {
		_spec.ClearField(txn.FieldHandleMsg, field.TypeString)
	}
	if value, ok := tu.mutation.HandleTime(); ok {
		_spec.SetField(txn.FieldHandleTime, field.TypeTime, value)
	}
	if tu.mutation.HandleTimeCleared() {
		_spec.ClearField(txn.FieldHandleTime, field.TypeTime)
	}
	if value, ok := tu.mutation.CollectStatus(); ok {
		_spec.SetField(txn.FieldCollectStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedCollectStatus(); ok {
		_spec.AddField(txn.FieldCollectStatus, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.CollectMsg(); ok {
		_spec.SetField(txn.FieldCollectMsg, field.TypeString, value)
	}
	if tu.mutation.CollectMsgCleared() {
		_spec.ClearField(txn.FieldCollectMsg, field.TypeString)
	}
	if value, ok := tu.mutation.CollectTime(); ok {
		_spec.SetField(txn.FieldCollectTime, field.TypeTime, value)
	}
	if tu.mutation.CollectTimeCleared() {
		_spec.ClearField(txn.FieldCollectTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TxnUpdateOne is the builder for updating a single Txn entity.
type TxnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TxnMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TxnUpdateOne) SetUpdatedAt(t time.Time) *TxnUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableUpdatedAt(t *time.Time) *TxnUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TxnUpdateOne) ClearUpdatedAt() *TxnUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuo *TxnUpdateOne) SetDeletedAt(t time.Time) *TxnUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableDeletedAt(t *time.Time) *TxnUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuo *TxnUpdateOne) ClearDeletedAt() *TxnUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetTxID sets the "tx_id" field.
func (tuo *TxnUpdateOne) SetTxID(s string) *TxnUpdateOne {
	tuo.mutation.SetTxID(s)
	return tuo
}

// SetChainID sets the "chain_id" field.
func (tuo *TxnUpdateOne) SetChainID(u uint64) *TxnUpdateOne {
	tuo.mutation.ResetChainID()
	tuo.mutation.SetChainID(u)
	return tuo
}

// AddChainID adds u to the "chain_id" field.
func (tuo *TxnUpdateOne) AddChainID(u int64) *TxnUpdateOne {
	tuo.mutation.AddChainID(u)
	return tuo
}

// SetProductID sets the "product_id" field.
func (tuo *TxnUpdateOne) SetProductID(i int64) *TxnUpdateOne {
	tuo.mutation.ResetProductID()
	tuo.mutation.SetProductID(i)
	return tuo
}

// AddProductID adds i to the "product_id" field.
func (tuo *TxnUpdateOne) AddProductID(i int64) *TxnUpdateOne {
	tuo.mutation.AddProductID(i)
	return tuo
}

// SetFromAddress sets the "from_address" field.
func (tuo *TxnUpdateOne) SetFromAddress(s string) *TxnUpdateOne {
	tuo.mutation.SetFromAddress(s)
	return tuo
}

// SetToAddress sets the "to_address" field.
func (tuo *TxnUpdateOne) SetToAddress(s string) *TxnUpdateOne {
	tuo.mutation.SetToAddress(s)
	return tuo
}

// SetAmountStr sets the "amount_str" field.
func (tuo *TxnUpdateOne) SetAmountStr(s string) *TxnUpdateOne {
	tuo.mutation.SetAmountStr(s)
	return tuo
}

// SetAmountRaw sets the "amount_raw" field.
func (tuo *TxnUpdateOne) SetAmountRaw(d decimal.Decimal) *TxnUpdateOne {
	tuo.mutation.ResetAmountRaw()
	tuo.mutation.SetAmountRaw(d)
	return tuo
}

// AddAmountRaw adds d to the "amount_raw" field.
func (tuo *TxnUpdateOne) AddAmountRaw(d decimal.Decimal) *TxnUpdateOne {
	tuo.mutation.AddAmountRaw(d)
	return tuo
}

// SetHandleStatus sets the "handle_status" field.
func (tuo *TxnUpdateOne) SetHandleStatus(i int64) *TxnUpdateOne {
	tuo.mutation.ResetHandleStatus()
	tuo.mutation.SetHandleStatus(i)
	return tuo
}

// SetNillableHandleStatus sets the "handle_status" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableHandleStatus(i *int64) *TxnUpdateOne {
	if i != nil {
		tuo.SetHandleStatus(*i)
	}
	return tuo
}

// AddHandleStatus adds i to the "handle_status" field.
func (tuo *TxnUpdateOne) AddHandleStatus(i int64) *TxnUpdateOne {
	tuo.mutation.AddHandleStatus(i)
	return tuo
}

// SetHandleMsg sets the "handle_msg" field.
func (tuo *TxnUpdateOne) SetHandleMsg(s string) *TxnUpdateOne {
	tuo.mutation.SetHandleMsg(s)
	return tuo
}

// SetNillableHandleMsg sets the "handle_msg" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableHandleMsg(s *string) *TxnUpdateOne {
	if s != nil {
		tuo.SetHandleMsg(*s)
	}
	return tuo
}

// ClearHandleMsg clears the value of the "handle_msg" field.
func (tuo *TxnUpdateOne) ClearHandleMsg() *TxnUpdateOne {
	tuo.mutation.ClearHandleMsg()
	return tuo
}

// SetHandleTime sets the "handle_time" field.
func (tuo *TxnUpdateOne) SetHandleTime(t time.Time) *TxnUpdateOne {
	tuo.mutation.SetHandleTime(t)
	return tuo
}

// SetNillableHandleTime sets the "handle_time" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableHandleTime(t *time.Time) *TxnUpdateOne {
	if t != nil {
		tuo.SetHandleTime(*t)
	}
	return tuo
}

// ClearHandleTime clears the value of the "handle_time" field.
func (tuo *TxnUpdateOne) ClearHandleTime() *TxnUpdateOne {
	tuo.mutation.ClearHandleTime()
	return tuo
}

// SetCollectStatus sets the "collect_status" field.
func (tuo *TxnUpdateOne) SetCollectStatus(i int64) *TxnUpdateOne {
	tuo.mutation.ResetCollectStatus()
	tuo.mutation.SetCollectStatus(i)
	return tuo
}

// SetNillableCollectStatus sets the "collect_status" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableCollectStatus(i *int64) *TxnUpdateOne {
	if i != nil {
		tuo.SetCollectStatus(*i)
	}
	return tuo
}

// AddCollectStatus adds i to the "collect_status" field.
func (tuo *TxnUpdateOne) AddCollectStatus(i int64) *TxnUpdateOne {
	tuo.mutation.AddCollectStatus(i)
	return tuo
}

// SetCollectMsg sets the "collect_msg" field.
func (tuo *TxnUpdateOne) SetCollectMsg(s string) *TxnUpdateOne {
	tuo.mutation.SetCollectMsg(s)
	return tuo
}

// SetNillableCollectMsg sets the "collect_msg" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableCollectMsg(s *string) *TxnUpdateOne {
	if s != nil {
		tuo.SetCollectMsg(*s)
	}
	return tuo
}

// ClearCollectMsg clears the value of the "collect_msg" field.
func (tuo *TxnUpdateOne) ClearCollectMsg() *TxnUpdateOne {
	tuo.mutation.ClearCollectMsg()
	return tuo
}

// SetCollectTime sets the "collect_time" field.
func (tuo *TxnUpdateOne) SetCollectTime(t time.Time) *TxnUpdateOne {
	tuo.mutation.SetCollectTime(t)
	return tuo
}

// SetNillableCollectTime sets the "collect_time" field if the given value is not nil.
func (tuo *TxnUpdateOne) SetNillableCollectTime(t *time.Time) *TxnUpdateOne {
	if t != nil {
		tuo.SetCollectTime(*t)
	}
	return tuo
}

// ClearCollectTime clears the value of the "collect_time" field.
func (tuo *TxnUpdateOne) ClearCollectTime() *TxnUpdateOne {
	tuo.mutation.ClearCollectTime()
	return tuo
}

// Mutation returns the TxnMutation object of the builder.
func (tuo *TxnUpdateOne) Mutation() *TxnMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TxnUpdate builder.
func (tuo *TxnUpdateOne) Where(ps ...predicate.Txn) *TxnUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TxnUpdateOne) Select(field string, fields ...string) *TxnUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Txn entity.
func (tuo *TxnUpdateOne) Save(ctx context.Context) (*Txn, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TxnUpdateOne) SaveX(ctx context.Context) *Txn {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TxnUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TxnUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TxnUpdateOne) sqlSave(ctx context.Context) (_node *Txn, err error) {
	_spec := sqlgraph.NewUpdateSpec(txn.Table, txn.Columns, sqlgraph.NewFieldSpec(txn.FieldID, field.TypeUint64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Txn.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, txn.FieldID)
		for _, f := range fields {
			if !txn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != txn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(txn.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(txn.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(txn.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(txn.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.TxID(); ok {
		_spec.SetField(txn.FieldTxID, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ChainID(); ok {
		_spec.SetField(txn.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedChainID(); ok {
		_spec.AddField(txn.FieldChainID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.ProductID(); ok {
		_spec.SetField(txn.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedProductID(); ok {
		_spec.AddField(txn.FieldProductID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.FromAddress(); ok {
		_spec.SetField(txn.FieldFromAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ToAddress(); ok {
		_spec.SetField(txn.FieldToAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AmountStr(); ok {
		_spec.SetField(txn.FieldAmountStr, field.TypeString, value)
	}
	if value, ok := tuo.mutation.AmountRaw(); ok {
		_spec.SetField(txn.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmountRaw(); ok {
		_spec.AddField(txn.FieldAmountRaw, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.HandleStatus(); ok {
		_spec.SetField(txn.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedHandleStatus(); ok {
		_spec.AddField(txn.FieldHandleStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.HandleMsg(); ok {
		_spec.SetField(txn.FieldHandleMsg, field.TypeString, value)
	}
	if tuo.mutation.HandleMsgCleared() {
		_spec.ClearField(txn.FieldHandleMsg, field.TypeString)
	}
	if value, ok := tuo.mutation.HandleTime(); ok {
		_spec.SetField(txn.FieldHandleTime, field.TypeTime, value)
	}
	if tuo.mutation.HandleTimeCleared() {
		_spec.ClearField(txn.FieldHandleTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.CollectStatus(); ok {
		_spec.SetField(txn.FieldCollectStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedCollectStatus(); ok {
		_spec.AddField(txn.FieldCollectStatus, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.CollectMsg(); ok {
		_spec.SetField(txn.FieldCollectMsg, field.TypeString, value)
	}
	if tuo.mutation.CollectMsgCleared() {
		_spec.ClearField(txn.FieldCollectMsg, field.TypeString)
	}
	if value, ok := tuo.mutation.CollectTime(); ok {
		_spec.SetField(txn.FieldCollectTime, field.TypeTime, value)
	}
	if tuo.mutation.CollectTimeCleared() {
		_spec.ClearField(txn.FieldCollectTime, field.TypeTime)
	}
	_node = &Txn{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

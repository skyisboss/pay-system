// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/skyisboss/pay-system/ent/tsession"
)

// TSession is the model entity for the TSession schema.
type TSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// KeyName holds the value of the "key_name" field.
	KeyName string `json:"key_name,omitempty"`
	// KeyValue holds the value of the "key_value" field.
	KeyValue string `json:"key_value,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tsession.FieldID:
			values[i] = new(sql.NullInt64)
		case tsession.FieldKeyName, tsession.FieldKeyValue, tsession.FieldIP:
			values[i] = new(sql.NullString)
		case tsession.FieldCreatedAt, tsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TSession fields.
func (t *TSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case tsession.FieldKeyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_name", values[i])
			} else if value.Valid {
				t.KeyName = value.String
			}
		case tsession.FieldKeyValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_value", values[i])
			} else if value.Valid {
				t.KeyValue = value.String
			}
		case tsession.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				t.IP = value.String
			}
		case tsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TSession.
// This includes values selected through modifiers, order, etc.
func (t *TSession) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this TSession.
// Note that you need to call TSession.Unwrap() before calling this method if this TSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TSession) Update() *TSessionUpdateOne {
	return NewTSessionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the TSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TSession) Unwrap() *TSession {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TSession is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TSession) String() string {
	var builder strings.Builder
	builder.WriteString("TSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("key_name=")
	builder.WriteString(t.KeyName)
	builder.WriteString(", ")
	builder.WriteString("key_value=")
	builder.WriteString(t.KeyValue)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(t.IP)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TSessions is a parsable slice of TSession.
type TSessions []*TSession
